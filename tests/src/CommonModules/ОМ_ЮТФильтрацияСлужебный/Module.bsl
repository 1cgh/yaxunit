//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2024 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты
		.ДобавитьТест("ЭтоПодходящееРасширение")
		.ДобавитьТест("ЭтоПодходящийМодуль")
		.ДобавитьТест("ОтфильтроватьТестовыеНаборы")
		.Добавитьтест("Фильтр_ПолноеИмяТеста")
		.Добавитьтест("Фильтр_Контексты")
		.Добавитьтест("Фильтр_ТегиМодуля")
		.Добавитьтест("Фильтр_ТегиНабора")
		.Добавитьтест("Фильтр_ТегиТеста")
	;
	
КонецПроцедуры

Процедура ЭтоПодходящееРасширение() Экспорт
	
	Варианты = ЮТест.Варианты("ИмяРасширения, Параметры, Результат, Описание");
	
	Параметры = ЮТФабрика.ПараметрыЗапуска();
	Параметры.filter.extensions = ЮТКоллекции.ЗначениеВМассиве("test", "тесты");
	Варианты.Добавить("test", Параметры, Истина, "Простой кейс");
	Варианты.Добавить("TeST", Параметры, Истина, "Изменен регистр");
	Варианты.Добавить("тесты", Параметры, Истина, "Второе расширение");
	Варианты.Добавить("_test", Параметры, Ложь, "Отсутствующее расширение");
	
	Параметры = ЮТФабрика.ПараметрыЗапуска();
	Варианты.Добавить("test", Параметры, Истина, "Без фильтр по расширениям 1");
	Варианты.Добавить("_test", Параметры, Истина, "Без фильтр по расширениям 2");
	
	Параметры = ЮТФабрика.ПараметрыЗапуска();
	Параметры.filter.tests = ЮТКоллекции.ЗначениеВМассиве("test.method");
	Варианты.Добавить("test", Параметры, Истина, "Фильтр по пути");
	Варианты.Добавить("_test", Параметры, Истина, "Фильтр по пути, отпустствующее расширение");
	
	Для Каждого Вариант Из Варианты.СписокВариантов() Цикл
		
		УстановитьФильтр(Вариант.Параметры);
		Результат = ЮТФильтрацияСлужебный.ЭтоПодходящееРасширение(Вариант.ИмяРасширения);
		
		ЮТест.ОжидаетЧто(Результат, Вариант.Описание).Равно(Вариант.Результат);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЭтоПодходящийМодуль() Экспорт
	
	Варианты = ЮТест.Варианты("ИмяМодуля, Параметры, Результат, Описание");
	РасширениеПоУмолчанию = "__тесты___";
	
	Параметры = ЮТФабрика.ПараметрыЗапуска();
	Параметры.filter.modules = ЮТКоллекции.ЗначениеВМассиве("test", "тесты");
	
	Варианты.Добавить("test", Параметры, Истина, "Простой кейс");
	Варианты.Добавить("TeST", Параметры, Истина, "Изменен регистр");
	Варианты.Добавить("тесты", Параметры, Истина, "Второй модуль");
	Варианты.Добавить("_test", Параметры, Ложь, "Отсутствующий модуль");
	
	Параметры = ЮТФабрика.ПараметрыЗапуска();
	
	Варианты.Добавить("module", Параметры, Истина, "Без фильтр по `module`");
	Варианты.Добавить("_module", Параметры, Истина, "Без фильтр по `_module`");
	
	Параметры = ЮТФабрика.ПараметрыЗапуска();
	Параметры.filter.modules = ЮТКоллекции.ЗначениеВМассиве("module");
	Параметры.filter.extensions = ЮТКоллекции.ЗначениеВМассиве(РасширениеПоУмолчанию);
	
	Варианты.Добавить("module", Параметры, Истина, "Фильтр по модулю и по расширению с пересечением");
	
	Параметры = ЮТФабрика.ПараметрыЗапуска();
	Параметры.filter.modules = ЮТКоллекции.ЗначениеВМассиве("module");
	Параметры.filter.extensions = ЮТКоллекции.ЗначениеВМассиве("тесты");
	Варианты.Добавить("module", Параметры, Ложь, "Фильтр по модулю и по расширению без пересечения");
	
	// Фильтрация по именам тестовых методов
	Параметры = ЮТФабрика.ПараметрыЗапуска();
	Параметры.filter.tests = ЮТКоллекции.ЗначениеВМассиве("module.method");
	Варианты.Добавить("module", Параметры, Истина, "Фильтр по имени теста");
	Варианты.Добавить("_test", Параметры, Ложь, "Фильтр по имени теста, отсутствующему модулю");
	
	Параметры = ЮТФабрика.ПараметрыЗапуска();
	Параметры.filter.tests = ЮТКоллекции.ЗначениеВМассиве("module.method");
	Параметры.filter.extensions = ЮТКоллекции.ЗначениеВМассиве(РасширениеПоУмолчанию);
	Варианты.Добавить("module", Параметры, Истина, "Фильтр по имени теста и по расширению с пересечением");
	
	Параметры = ЮТФабрика.ПараметрыЗапуска();
	Параметры.filter.tests = ЮТКоллекции.ЗначениеВМассиве("module.method");
	Параметры.filter.extensions = ЮТКоллекции.ЗначениеВМассиве("test");
	Варианты.Добавить("module", Параметры, Ложь, "Фильтр по имени теста и по расширению без пересечения");
	
	Параметры = ЮТФабрика.ПараметрыЗапуска();
	Параметры.filter.tests = ЮТКоллекции.ЗначениеВМассиве("module.method");
	Параметры.filter.modules = ЮТКоллекции.ЗначениеВМассиве("module");
	Варианты.Добавить("module", Параметры, Истина, "Фильтр по имени теста и по модулю с пересечением");
	
	Параметры = ЮТФабрика.ПараметрыЗапуска();
	Параметры.filter.tests = ЮТКоллекции.ЗначениеВМассиве("module.method");
	Параметры.filter.modules = ЮТКоллекции.ЗначениеВМассиве("test");
	Варианты.Добавить("module", Параметры, Ложь, "Фильтр по имени теста и по модулю без пересечения");
	
	Для Каждого Вариант Из Варианты.СписокВариантов() Цикл
		
		УстановитьФильтр(Вариант.Параметры);
		ОписаниеМодуля = МетаданныеМодуля(Вариант.ИмяМодуля, РасширениеПоУмолчанию);
		
		Результат = ЮТФильтрацияСлужебный.ЭтоПодходящийМодуль(ОписаниеМодуля);
		
		ЮТест.ОжидаетЧто(Результат, Вариант.Описание + ". Имя модуля:" + Вариант.ИмяМодуля).Равно(Вариант.Результат);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтфильтроватьТестовыеНаборы() Экспорт
	
	// 1
	Контексты = ЮТФабрика.КонтекстыВызова();
	
	ОписаниеМодуля = ЮТФабрикаСлужебный.ОписаниеМодуля();
	ОписаниеМодуля.Имя = "ТестовыйМодуль";
	ОписаниеМодуля.Расширение = "ТестовоеРасширение";
	ОписаниеМодуля.Сервер = Истина;
	ОписаниеМодуля.КлиентУправляемоеПриложение = Истина;
	
	Наборы = Новый Массив();
	Набор = ЮТФабрикаСлужебный.ОписаниеТестовогоНабора("Тесты");
	Тест = ЮТФабрикаСлужебный.ОписаниеТеста("Тест1", "Тест 1", ЮТКоллекции.ЗначениеВМассиве(Контексты.Сервер, Контексты.КлиентУправляемоеПриложение));
	Набор.Тесты.Добавить(Тест);
	Наборы.Добавить(Набор);
	
	Параметры = ЮТФабрика.ПараметрыЗапуска();
	Параметры.filter.tests = ЮТКоллекции.ЗначениеВМассиве("ТестовыйМодуль.Тест1");
	УстановитьФильтр(Параметры);
	
	Результат = ЮТФильтрацияСлужебный.ОтфильтроватьТестовыеНаборы(Наборы, ОписаниеМодуля);
	ЮТест.ОжидаетЧто(Результат, "Результат фильтрации")
		.Заполнено()
		.ИмеетТип("Массив");
	НаборРезультата = Результат[0];
	ЮТест.ОжидаетЧто(НаборРезультата, "Набор результата")
		.Заполнено()
		.Свойство("Имя").Равно(Набор.Имя)
		.Свойство("Представление").Равно(Набор.Представление)
		.Свойство("Тесты").Заполнено();
	ТестРезультата = НаборРезультата.Тесты[0];
	ЮТест.ОжидаетЧто(ТестРезультата, "Тест результата")
		.Свойство("Имя").Равно(Тест.Имя)
		.Свойство("КонтекстВызова").ИмеетДлину(2);
	
	// 2
	Параметры = ЮТФабрика.ПараметрыЗапуска();
	Параметры.filter.tests = ЮТКоллекции.ЗначениеВМассиве("ТестовыйМодуль.Тест1.Сервер");
	УстановитьФильтр(Параметры);
	
	Результат = ЮТФильтрацияСлужебный.ОтфильтроватьТестовыеНаборы(Наборы, ОписаниеМодуля);
	ТестРезультата = Результат[0].Тесты[0];
	ЮТест.ОжидаетЧто(ТестРезультата, "Тест с указанием контекста")
		.Свойство("Имя").Равно(Тест.Имя)
		.Свойство("КонтекстВызова").ИмеетДлину(1);
	
	// 3
	Параметры = ЮТФабрика.ПараметрыЗапуска();
	Параметры.filter.tests = ЮТКоллекции.ЗначениеВМассиве("ТестовыйМодуль.Тест1.ВызовСервера");
	УстановитьФильтр(Параметры);
	
	Результат = ЮТФильтрацияСлужебный.ОтфильтроватьТестовыеНаборы(Наборы, ОписаниеМодуля);
	ЮТест.ОжидаетЧто(Результат, "Тест с указаниме недоступного контекста")
		.ИмеетДлину(1);
	
	// 4
	Параметры = ЮТФабрика.ПараметрыЗапуска();
	Параметры.filter.tests = ЮТКоллекции.ЗначениеВМассиве("ТестовыйМодуль.Тест1.Сервер");
	Параметры.filter.contexts = ЮТКоллекции.ЗначениеВМассиве(Контексты.КлиентУправляемоеПриложение);
	УстановитьФильтр(Параметры);
	
	Результат = ЮТФильтрацияСлужебный.ОтфильтроватьТестовыеНаборы(Наборы, ОписаниеМодуля);
	ЮТест.ОжидаетЧто(Результат, "Тест с указаниме контекста и фильтра контекстов")
		.ИмеетДлину(0);
	
КонецПроцедуры

Процедура Фильтр_ПолноеИмяТеста() Экспорт
	
	ИмяМодуля = "ТестовыйМодуль";
	ИмяТеста = "ТестовыйТест";
	
	ОписаниеМодуля = ОписаниеМодуля(ИмяМодуля);
	НаборТестов = ОписаниеНабораТестов();
	НаборТестов.Тесты.Добавить(ОписаниеТеста(ИмяТеста));
	НаборТестов.Тесты.Добавить(ОписаниеТеста(ИмяТеста + "_"));
	НаборТестов.Тесты.Добавить(ОписаниеТеста(ИмяТеста, "НеСервер"));
	НаборТестов.Тесты.Добавить(ОписаниеТеста());
	ОписаниеМодуля.НаборыТестов.Добавить(НаборТестов);
	
	УстановитьНовыйФильтр(, СтрШаблон("%1.%2", ИмяМодуля, ИмяТеста));
	ЮТФильтрацияСлужебный.ОтфильтроватьТестовыеНаборы(ОписаниеМодуля);
	
	ЮТест.ОжидаетЧто(ОписаниеМодуля.НаборыТестов)
		.ИмеетДлину(1)
		.Свойство("[0].Тесты").ИмеетДлину(1);
	
КонецПроцедуры

Процедура Фильтр_Контексты() Экспорт
	
	ОписаниеМодуля = ОписаниеМодуля();
	НаборТестов = ОписаниеНабораТестов();
	НаборТестов.Тесты.Добавить(ОписаниеТеста());                   // +
	НаборТестов.Тесты.Добавить(ОписаниеТеста(, "Сервер"));         // +
	НаборТестов.Тесты.Добавить(ОписаниеТеста(, "Сервер, Сервер")); // +
	НаборТестов.Тесты.Добавить(ОписаниеТеста(, "Клиент"));
	ОписаниеМодуля.НаборыТестов.Добавить(НаборТестов);
	
	УстановитьНовыйФильтр(, , "Сервер");
	ЮТФильтрацияСлужебный.ОтфильтроватьТестовыеНаборы(ОписаниеМодуля);
	
	ЮТест.ОжидаетЧто(ОписаниеМодуля.НаборыТестов)
		.ИмеетДлину(1)
		.Свойство("[0].Тесты").ИмеетДлину(3);
	
КонецПроцедуры

Процедура Фильтр_ТегиТеста() Экспорт
	
	ОписаниеМодуля = ОписаниеМодуля();
	НаборТестов = ОписаниеНабораТестов();
	НаборТестов.Тесты.Добавить(ОписаниеТеста());
	НаборТестов.Тесты.Добавить(ОписаниеТеста(, , "Тег1"));
	НаборТестов.Тесты.Добавить(ОписаниеТеста(, ,  "Тег1, Тег2"));
	НаборТестов.Тесты.Добавить(ОписаниеТеста(, ,  "Тег2"));
	НаборТестов.Тесты.Добавить(ОписаниеТеста(, , "Тег11"));
	ОписаниеМодуля.НаборыТестов.Добавить(НаборТестов);
	
	УстановитьНовыйФильтр(, , , "Тег1, Тег2, Т, _, Тег111");
	ЮТФильтрацияСлужебный.ОтфильтроватьТестовыеНаборы(ОписаниеМодуля);
	
	ЮТест.ОжидаетЧто(ОписаниеМодуля.НаборыТестов)
		.ИмеетДлину(1)
		.Свойство("[0].Тесты").ИмеетДлину(3);
	
КонецПроцедуры

Процедура Фильтр_ТегиНабора() Экспорт
	
	Набор1 = ОписаниеНабораТестов();
	Набор1.Теги = ЮТКоллекции.ЗначениеВМассиве("ТегНабора");
	Набор1.Тесты.Добавить(ОписаниеТеста());
	Набор1.Тесты.Добавить(ОписаниеТеста());
	
	Набор2 = ОписаниеНабораТестов();
	Набор2.Тесты.Добавить(ОписаниеТеста());
	Набор2.Тесты.Добавить(ОписаниеТеста(, , "ТегТеста"));
	
	ОписаниеМодуля = ОписаниеМодуля();
	ДобавитьКопиюНабора(ОписаниеМодуля, Набор1);
	ДобавитьКопиюНабора(ОписаниеМодуля, Набор2);
	
	УстановитьНовыйФильтр(, , , "ТегНабора");
	ЮТФильтрацияСлужебный.ОтфильтроватьТестовыеНаборы(ОписаниеМодуля);
	
	ЮТест.ОжидаетЧто(ОписаниеМодуля.НаборыТестов)
		.ИмеетДлину(1)
		.Свойство("[0].Тесты").ИмеетДлину(2);
	
	ОписаниеМодуля = ОписаниеМодуля();
	ДобавитьКопиюНабора(ОписаниеМодуля, Набор1);
	ДобавитьКопиюНабора(ОписаниеМодуля, Набор2);
	
	УстановитьНовыйФильтр(, , , "ТегНабора, ТегТеста");
	ЮТФильтрацияСлужебный.ОтфильтроватьТестовыеНаборы(ОписаниеМодуля);
	
	ЮТест.ОжидаетЧто(ОписаниеМодуля.НаборыТестов)
		.ИмеетДлину(2)
		.Свойство("[0].Тесты").ИмеетДлину(2)
		.Свойство("[1].Тесты").ИмеетДлину(1);
	
КонецПроцедуры

Процедура Фильтр_ТегиМодуля() Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьНовыйФильтр(Модули = Неопределено,
								Тесты = Неопределено,
								Контексты = Неопределено,
								Теги = Неопределено,
								Расширения = Неопределено)
	
	Параметры = ЮТФабрика.ПараметрыЗапуска();
	
	Если Расширения <> Неопределено Тогда
		Параметры.filter.extensions = ЮТСтроки.РазделитьСтроку(Расширения, ",");
	КонецЕсли;
	
	Если Тесты <> Неопределено Тогда
		Параметры.filter.tests = ЮТСтроки.РазделитьСтроку(Тесты, ",");
	КонецЕсли;
	
	Если Модули <> Неопределено Тогда
		Параметры.filter.modules = ЮТСтроки.РазделитьСтроку(Модули, ",");
	КонецЕсли;
	
	Если Теги <> Неопределено Тогда
		Параметры.filter.tags = ЮТСтроки.РазделитьСтроку(Теги, ",");
	КонецЕсли;
	
	Если Контексты <> Неопределено Тогда
		Параметры.filter.contexts = ЮТСтроки.РазделитьСтроку(Контексты, ",");
	КонецЕсли;
	
	УстановитьФильтр(Параметры);
	
КонецПроцедуры

Процедура УстановитьФильтр(Параметры)
	
	ЮТФильтрацияСлужебный.УстановитьКонтекст(Параметры);
	
КонецПроцедуры

Функция МетаданныеМодуля(ИмяМодуля = "ТестовыйМодуль", Расширение = "ТестовоеРасширение")
	
	МетаданныеМодуля = ЮТФабрикаСлужебный.ОписаниеМодуля();
	МетаданныеМодуля.Имя = ИмяМодуля;
	МетаданныеМодуля.Расширение = Расширение;
	
	Возврат МетаданныеМодуля;
	
КонецФункции

Функция ОписаниеМодуля(ИмяМодуля = "ТестовыйМодуль")
	
	Возврат ЮТФабрикаСлужебный.ОписаниеТестовогоМодуля(МетаданныеМодуля(ИмяМодуля), Новый Массив());
	
КонецФункции

Функция ОписаниеНабораТестов(Имя = "ТестовыйНабор", Теги = "")
	
	Возврат ЮТФабрикаСлужебный.ОписаниеТестовогоНабора(Имя, Теги);
	
КонецФункции

Функция ОписаниеТеста(ИмяТеста = Неопределено, КонтекстыВызова = "Сервер, КлиентУправляемоеПриложение", Теги = "")
	
	Если ИмяТеста = Неопределено Тогда
		ИмяТеста = ЮТест.Данные().СлучайнаяСтрока();
	КонецЕсли;
	
	Возврат ЮТФабрикаСлужебный.ОписаниеТеста(ИмяТеста, 
											 ЮТест.Данные().СлучайнаяСтрока(),
											 СтрРазделить(КонтекстыВызова, ", ", Ложь),
											 Теги);
	
КонецФункции

Процедура ДобавитьКопиюНабора(ОписаниеМодуля, Набор)
	
	ОписаниеМодуля.НаборыТестов.ДОбавить(ЮТКоллекции.СкопироватьРекурсивно(Набор));
	
КонецПроцедуры

#КонецОбласти

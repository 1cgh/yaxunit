//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2024 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

// Установить фоновую блокировку.
// 
// Параметры:
//  Блокировка - БлокировкаДанных
//  Длительность Длительность
// 
// Возвращаемое значение:
//  
Процедура УстановитьФоновуюБлокировку(Блокировка, Длительность) Экспорт
	
	ОписаниеБлокировки = ОписаниеБлокировки(Блокировка);
	Параметры = ЮТКоллекции.ЗначениеВМассиве(ОписаниеБлокировки, Длительность);
	
	Задание = ФоновыеЗадания.Выполнить("ЮТУправялемыеБлокировки.УстановитьБлокировку", Параметры);
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		//@skip-check empty-except-statement
		Попытка
			ФоновыеЗадания.ОжидатьЗавершения(ЮТКоллекции.ЗначениеВМассиве(Задание), 1);
		Исключение
			// Исключение не интересно
		КонецПопытки;
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Задание.УникальныйИдентификатор);
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		ВызватьИсключение Задание.ИнформацияОбОшибке;
	ИначеЕсли Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		ВызватьИсключение "Фоновое задание с блокировкой завершилось";
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьБлокировку(ОписаниеБлокировки, Длительность) Экспорт
	
	Блокировка = Новый БлокировкаДанных();
	
	Для Каждого ОписаниеЭлемента Из ОписаниеБлокировки Цикл
		Элемент = Блокировка.Добавить();
		ЗаполнитьЗначенияСвойств(Элемент, ОписаниеЭлемента, "Область, Режим");
		
		Для Каждого ОписаниеПоля Из ОписаниеЭлемента.Поля Цикл
			Элемент.УстановитьЗначение(ОписаниеПоля.Поле, ОписаниеПоля.Значение);
		КонецЦикла;
	КонецЦикла;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	//@skip-check lock-out-of-try
	Блокировка.Заблокировать();
	ЮТОбщий.Пауза(Длительность);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеБлокировки(Блокировка)
	
	Описание = Новый Массив();
	
	Для Каждого Элемент Из Блокировка Цикл
		Описание.Добавить(ОписаниеЭлементаБлокировки(Элемент));
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеЭлементаБлокировки(ЭлементБлокировки)
	
	Описание = Новый Структура;
	Описание.Вставить("Область", ЭлементБлокировки.Область);
	Описание.Вставить("Режим", ЭлементБлокировки.Режим);
	Описание.Вставить("Поля", Новый Массив);
	
	Для Каждого Поле Из ЭлементБлокировки.Поля Цикл
		ОписаниеПоля = Новый Структура;
		ОписаниеПоля.Вставить("Поле", Поле.Поле);
		ОписаниеПоля.Вставить("Значение", Поле.Значение);
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

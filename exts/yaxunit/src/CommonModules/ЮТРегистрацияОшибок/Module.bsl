//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2022 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции, предназначенные для использования другими 
// объектами конфигурации или другими программами
///////////////////////////////////////////////////////////////////////////////// 
#Область ПрограммныйИнтерфейс

// ОбработатьОшибкуТеста
//  Анализирует возникшую ошибку и прописывает ее в результатах теста
// Параметры:
//  Тест - Структура - Тест, см. ЮТФабрика.ОписаниеИсполняемогоТеста
//  ИнформацияОбОшибке - ИнформацияОбОшибке, Структура - Информация о возникшей ошибке
Процедура ОбработатьОшибкуТеста(Тест, ИнформацияОбОшибке) Экспорт
	
	Статусы = ЮТФабрика.СтатусыИсполненияТеста();
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("Структура") Тогда
		
		Тест.Статус = Статусы.Сломан;
		Тест.ОписаниеОшибки = ИнформацияОбОшибке;
		Возврат;
		
	КонецЕсли;
	
	Описание = ИнформацияОбОшибке.Описание;
	
	Если Описание = СтрШаблон("Метод объекта не обнаружен (%1)", Тест.Метод)
		И СтрНачинаетсяС(ИнформацияОбОшибке.ИсходнаяСтрока, Тест.ПолноеИмяМетода + "()") Тогда
		
		Тест.Статус = Статусы.НеРеализован;
		Тест.ОписаниеОшибки = ДанныеОшибки(ИнформацияОбОшибке, ИнформацияОбОшибке.Описание, ЮТФабрика.ТипыОшибок().ТестНеРеализован);
		
	ИначеЕсли СтрНачинаетсяС(Описание, ПрефиксОшибкиУтверждений()) Тогда
		
		Тест.Статус = Статусы.Ошибка;
		Тест.ОписаниеОшибки = ДанныеОшибкиУтверждений(ИнформацияОбОшибке);
		
	Иначе
		
		Тест.Статус = Статусы.Сломан;
		Тест.ОписаниеОшибки = ДанныеОшибки(ИнформацияОбОшибке, ИнформацияОбОшибке.Описание);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеОшибки(Ошибка, Сообщение, ТипОшибки = "") Экспорт
	
	ДанныеОшибки = ЮТФабрика.ОписаниеВозникшейОшибки();
	
	ДанныеОшибки.Сообщение = Сообщение;
	ДанныеОшибки.Стек = ПодробноеПредставлениеОшибки(Ошибка);
	ДанныеОшибки.ТипОшибки = ТипОшибки;
	
#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
	Сообщения = ЮТОбщий.ВыгрузитьЗначения(ПолучитьСообщенияПользователю(Истина), "Текст");
	ДанныеОшибки.Стек = СтрШаблон("%1
		|Сообщения пользователю:
		|	%2", ДанныеОшибки.Стек, СтрСоединить(Сообщения, Символы.ПС));
#КонецЕсли
	
	Возврат ДанныеОшибки;
	
КонецФункции

Процедура ОшибкаИнициализации(Ошибка, Описание) Экспорт
	
	Ошибка(Ошибка, Описание);
	
КонецПроцедуры

Функция ПрефиксОшибкиУтверждений() Экспорт
	
	Возврат "[Failed]";
	
КонецФункции

Функция ПрефиксОшибкиВыполнения() Экспорт
	
	Возврат "[Broken]";
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции для служебного использования внутри подсистемы
///////////////////////////////////////////////////////////////////////////////// 
#Область СлужебныйПрограммныйИнтерфейс

Процедура СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке) Экспорт
	
	СтруктураОшибки = ЮТКонтекст.КонтекстОшибки();
	СтруктураОшибки.ОшибкаСравнения = Ложь;
	
	ВызватьОшибкуИсполнения(ИнформацияОбОшибке);
	
КонецПроцедуры

Процедура СгенерироватьОшибкуУтверждения(Сообщение, ОжидаемоеЗначение, ПроверяемоеЗначение, ОбъектПроверки = "проверяемое значение") Экспорт
	
	УстановитьДанныеОшибкиСравнения(ОжидаемоеЗначение, ПроверяемоеЗначение);
	
	ТекстСообщения = ФорматированныйТекстОшибкиУтверждения(ПроверяемоеЗначение, Сообщение, ОбъектПроверки);
	
	ВызватьОшибкуПроверки(ТекстСообщения);
	
КонецПроцедуры

Процедура ВызватьОшибкуПроверки(Знач ТекстСообщения) Экспорт
	
	ПрефиксОшибки = ЮТКонтекст.КонтекстПроверки().ПрефиксОшибки;
	
	ТекстСообщения = ЮТОбщий.ДобавитьСтроку(ПрефиксОшибки, ТекстСообщения, ": ");
	// Начало строки в верхний регистр
	ТекстСообщения = ВРег(Лев(ТекстСообщения, 1)) + Сред(ТекстСообщения, 2);
	
	ВызватьИсключение СтрШаблон("%1 <%2>", ПрефиксОшибкиУтверждений(), ТекстСообщения);
	
КонецПроцедуры

Процедура ВызватьОшибкуИсполнения(Знач ИнформацияОбОшибке) Экспорт
	
	ПрефиксОшибки = ЮТКонтекст.КонтекстПроверки().ПрефиксОшибки;
	
	ТекстОшибки = ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке);
	
	ТекстСообщения = ЮТОбщий.ДобавитьСтроку(ПрефиксОшибки, ТекстОшибки, ": ");
	// Начало строки в верхний регистр
	ТекстСообщения = ВРег(Лев(ТекстСообщения, 1)) + Сред(ТекстСообщения, 2);
	
	ВызватьИсключение СтрШаблон("%1 <%2>", ПрефиксОшибкиВыполнения(), ТекстСообщения);
	
КонецПроцедуры

Процедура УстановитьДанныеОшибкиСравнения(ОжидаемоеЗначение, ПроверяемоеЗначение) Экспорт
	
	СтруктураОшибки = ЮТКонтекст.КонтекстОшибки();
	
	СтруктураОшибки.ОшибкаСравнения     = Истина;
	СтруктураОшибки.ПроверяемоеЗначение = Строка(ПроверяемоеЗначение);
	СтруктураОшибки.ОжидаемоеЗначение   = Строка(ОжидаемоеЗначение);
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, составляющие внутреннюю реализацию модуля 
///////////////////////////////////////////////////////////////////////////////// 
#Область СлужебныеПроцедурыИФункции

Функция ДанныеОшибкиУтверждений(Ошибка)
	
	ДлинаПрефикса = СтрДлина(ПрефиксОшибкиУтверждений());
	
	Описание = Сред(Ошибка.Описание, ДлинаПрефикса + 1);
	Описание = СокрЛП(Описание);
	
	Если СтрНачинаетсяС(Описание, "<") И СтрЗаканчиваетсяНа(Описание, ">") Тогда
		Описание = Сред(Описание, 2, СтрДлина(Описание) - 2);
	КонецЕсли;
	
	ДанныеОшибки = ЮТФабрика.ОписаниеОшибкиСравнения();
	
	ДанныеОшибки.Сообщение = Описание;
	ДанныеОшибки.Стек = ПодробноеПредставлениеОшибки(Ошибка);
#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
	Сообщения = ЮТОбщий.ВыгрузитьЗначения(ПолучитьСообщенияПользователю(Истина), "Текст");
	ДанныеОшибки.Стек = СтрШаблон("%1
		|Сообщения пользователю:
		|	%2", ДанныеОшибки.Стек, СтрСоединить(Сообщения, Символы.ПС));
#КонецЕсли
	
	СтруктураОшибки = ЮТКонтекст.КонтекстОшибки();
	
	Если СтруктураОшибки <> Неопределено И СтруктураОшибки.ОшибкаСравнения Тогда
		ДанныеОшибки.ПроверяемоеЗначение = СтруктураОшибки.ПроверяемоеЗначение;
		ДанныеОшибки.ОжидаемоеЗначение = СтруктураОшибки.ОжидаемоеЗначение;
	КонецЕсли;
	
	Возврат ДанныеОшибки;
	
КонецФункции

Функция МодулиУтверждений()
	
	Возврат ЮТОбщий.ЗначениеВМассиве("ЮТУтверждения");
	
КонецФункции

Процедура Ошибка(Ошибка, Описание)
	
	ТекстОшибки = СтрШаблон("%1: %2", Описание, ПодробноеПредставлениеОшибки(Ошибка));
	ЮТОбщий.СообщитьПользователю(ТекстОшибки);
	
КонецПроцедуры

Функция ИнформациюОбОшибкеВСтроку(Ошибка, НомерПричины = 0)
	
	ТекстОшибки = "";
	
	Если Ошибка = Неопределено Тогда
			
		ТекстОшибки = "Неизвестная ошибка.";
		
	ИначеЕсли ТипЗнч(Ошибка) = Тип("Строка") Тогда
			
		ТекстОшибки = Ошибка;
		
	ИначеЕсли ЭтоОшибкаСлужебногоМодуля(Ошибка) Тогда
		
		Если Ошибка.Причина = Неопределено Тогда
			
			ТекстОшибки = Ошибка.Описание;
			
		Иначе
			
			ТекстОшибки = ИнформациюОбОшибкеВСтроку(Ошибка.Причина, НомерПричины);
			
		КонецЕсли;
		
	Иначе
		
		Если Не ПустаяСтрока(Ошибка.ИмяМодуля) Тогда
			
			ТекстОшибки = ТекстОшибки + "{"
				+ Ошибка.ИмяМодуля + "("
				+ Ошибка.НомерСтроки + ")}: ";
				
		КонецЕсли;
		
		ТекстОшибки = ТекстОшибки + Ошибка.Описание + ?(ПустаяСтрока(Ошибка.ИсходнаяСтрока), "", "
						|" + Ошибка.ИсходнаяСтрока);
		
		Если Ошибка.Причина <> Неопределено Тогда
							
			ТекстОшибки = ТекстОшибки + "
				|
				|ПРИЧИНА №" + Формат(НомерПричины + 1, "ЧГ=0") + "
				|" + ИнформациюОбОшибкеВСтроку(Ошибка.Причина, НомерПричины + 1);
				
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ТекстОшибки;
	
КонецФункции

Функция ЭтоОшибкаСлужебногоМодуля(Ошибка)
	
	Если НЕ ЗначениеЗаполнено(Ошибка.ИмяМодуля) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ИмяМодуля Из МодулиУтверждений() Цикл
		Если СтрНайти(Ошибка.ИмяМодуля, ИмяМодуля) > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ФорматированныйТекстОшибкиУтверждения(Знач ПроверяемоеЗначение, ТекстОжидания, ОбъектПроверки)
	
	Контекст = ЮТКонтекст.КонтекстПроверки();
	ИмяСвойства = Контекст.ИмяСвойства;
	
	Если ЗначениеЗаполнено(ИмяСвойства) Тогда
		ВставкаСвойство = СтрШаблон(" содержит свойство `%1`, которое", ИмяСвойства);
		ПроверяемоеЗначение = Контекст.ПроверяемоеЗначение;
	Иначе
		ВставкаСвойство = "";
	КонецЕсли;
	
	// Заголовок сообщения
	ТекстСообщения = "";
	// Тело сообщения
	ТекстСообщения = СтрШаблон("ожидали, что %1 `%2`%3 %4, но это не так.",
		ОбъектПроверки,
		ПроверяемоеЗначение,
		ВставкаСвойство,
		ТекстОжидания);
	
	Возврат ТекстСообщения;

КонецФункции

#КонецОбласти

//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2024 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

// Разрешить зависимости.
// 
// Параметры:
//  ТестовыйМодуль - см. ЮТФабрикаСлужебный.ОписаниеИсполняемогоТестовогоМодуля
Процедура РазрешитьЗависимости(ТестовыйМодуль) Экспорт
	
	РезультатРазрешенияЗависимостей = РазрешитьЗависимостиОбъекта(ТестовыйМодуль);
	Статусы = ЮТФабрика.СтатусыИсполненияТеста();
	
	Если НЕ РезультатРазрешенияЗависимостей.Успешно Тогда
		УстановитьОшибкиВ(ТестовыйМодуль.НаборыТестов, РезультатРазрешенияЗависимостей.Ошибка);
		Возврат;
	КонецЕсли;
	
	Для Каждого Набор Из ТестовыйМодуль.НаборыТестов Цикл
		
		РезультатРазрешенияЗависимостей = РазрешитьЗависимостиОбъекта(Набор);
		
		Если НЕ РезультатРазрешенияЗависимостей.Успешно Тогда
			УстановитьОшибкиВ(Набор.Тесты, РезультатРазрешенияЗависимостей.Ошибка);
			Набор.Ошибки.Добавить(РезультатРазрешенияЗависимостей.Ошибка);
			Набор.Выполнять = Ложь;
			Продолжить;
		КонецЕсли;
		
		Для Каждого Тест Из Набор.Тесты Цикл
			РезультатРазрешенияЗависимостей = РазрешитьЗависимостиОбъекта(Тест);
			
			Если НЕ РезультатРазрешенияЗависимостей.Успешно Тогда
				Тест.Ошибки.Добавить(РезультатРазрешенияЗависимостей.Ошибка);
				Тест.Статус = Статусы.Пропущен;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Дедупликация зависимостей.
// 
// Параметры:
//  РезультатЧтенияТестов - Массив из см. ЮТФабрикаСлужебный.ОписаниеТестовогоМодуля - Набор описаний тестовых модулей, которые содержат информацию о запускаемых тестах
Процедура ДедупликацияЗависимостей(РезультатЧтенияТестов) Экспорт
	
	Зависимости = Новый Соответствие();
	
	Для Каждого ТестовыйМодуль Из РезультатЧтенияТестов Цикл
		
		ДедупликацияЗависимостейОбъекта(Зависимости, ТестовыйМодуль);
		
		Для Каждого ТестовыйНабор Из ТестовыйМодуль.НаборыТестов Цикл
			
			ДедупликацияЗависимостейОбъекта(Зависимости, ТестовыйНабор);
			
			Для Каждого Тест Из ТестовыйНабор.Тесты Цикл
				ДедупликацияЗависимостейОбъекта(Зависимости, Тест);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьРезультатРазрешенияЗависимости(КлючЗависимости, Результат) Экспорт
	
	КонтекстРазрешенныеЗависимости = ЮТКонтекстСлужебный.ЗначениеКонтекста(ИмяКонтекстаРазрешенныеЗависимости());
	КонтекстРазрешенныеЗависимости.Вставить(КлючЗависимости, Результат);
	
	ПередаваемыеЗначения = Новый Соответствие();
	ИмяКонтекстаДанныеЗависимостей = ИмяКонтекстаДанныеЗависимостей();
	
	Если Результат.СохраняемыйКонтекст <> Неопределено Тогда
		
		ПередаваемыеЗначения.Вставить(КлючЗависимости, Результат.СохраняемыйКонтекстСервер);
		ЮТКонтекстСлужебный.ВставитьЗначениеКонтекста(ИмяКонтекстаДанныеЗависимостей, ПередаваемыеЗначения);
		ЮТКонтекстСлужебный.ВставитьЗначениеКонтекста(ИмяКонтекстаДанныеЗависимостей, ПередаваемыеЗначения, Истина);
		
	КонецЕсли;
	
	Если Результат.СохраняемыйКонтекстСервер <> Неопределено Тогда
		
		ПередаваемыеЗначения.Вставить(КлючЗависимости, Результат.СохраняемыйКонтекстСервер);
		ЮТКонтекстСлужебный.ВставитьЗначениеКонтекста(ИмяКонтекстаДанныеЗависимостей, ПередаваемыеЗначения, Истина);
		
	КонецЕсли;
	
	Если Результат.СохраняемыйКонтекстКлиент <> Неопределено Тогда
		
		ПередаваемыеЗначения.Вставить(КлючЗависимости, Результат.СохраняемыйКонтекстКлиент);
		ЮТКонтекстСлужебный.ВставитьЗначениеКонтекста(ИмяКонтекстаДанныеЗависимостей, ПередаваемыеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатРазрешенияЗависимости(ОписаниеЗависимости) Экспорт
	
	КлючЗависимости = КлючЗависимости(ОписаниеЗависимости);
	
	Результаты = ЮТКонтекстСлужебный.ЗначениеКонтекста(ИмяКонтекстаДанныеЗависимостей());
	Возврат Результаты[КлючЗависимости];
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализацияКонтекста(ДанныеКонтекста) Экспорт
	
	ДанныеКонтекста.Вставить(ИмяКонтекстаДанныеЗависимостей(), Новый Соответствие());
	ДанныеКонтекста.Вставить(ИмяКонтекстаРазрешенныеЗависимости(), Новый Соответствие());
	
КонецПроцедуры

Функция РазрешитьЗависимостиОбъекта(Объект)
	
	Для Каждого Зависимость Из Объект.Зависимости Цикл
		
		Результат = РазрешитьЗависимость(Зависимость);
		
		Если НЕ Результат.Успешно Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("Успешно, Ошибка", Истина);
	
КонецФункции

Функция РазрешитьЗависимость(ОписаниеЗависимости)
	
	Сообщение = СтрШаблон("Не удалось разрешить зависимость `%1`", ПредставлениеЗависимости(ОписаниеЗависимости));
	
	Попытка
		РезультатРазрешения = ЮТМетодыСлужебный.ВызватьФункцию(ОписаниеЗависимости.МетодРеализации, ОписаниеЗависимости.Параметры);
	Исключение
		РезультатРазрешения = ЮТФабрикаСлужебный.РезультатРазрешенияЗависимости();
		РезультатРазрешения.Ошибка = ОписаниеОшибкиПропуска(Сообщение, ИнформацияОбОшибке());
		СохранитьРезультатРазрешенияЗависимости(ОписаниеЗависимости.Ключ, РезультатРазрешения);
		Возврат РезультатРазрешения;
	КонецПопытки;
	
	Если НЕ РезультатРазрешения.Успешно Тогда
		
		Если РезультатРазрешения.Ошибка = Неопределено Тогда
			РезультатРазрешения.Ошибка = ОписаниеОшибкиПропуска(Сообщение);
		Иначе
			РезультатРазрешения.Ошибка.Сообщение = ЮТСтроки.ДобавитьСтроку(Сообщение, РезультатРазрешения.Ошибка.Сообщение, Символы.ПС);
		КонецЕсли;
		
	КонецЕсли;
	
	СохранитьРезультатРазрешенияЗависимости(ОписаниеЗависимости.Ключ, РезультатРазрешения);
	
	Возврат РезультатРазрешения;
	
КонецФункции

Процедура ДедупликацияЗависимостейОбъекта(Зависимости, Объект)
	
	Для Инд = 0 По Объект.Зависимости.ВГраница() Цикл
		Объект.Зависимости[Инд] = УникальнаяЗависимость(Зависимости, Объект.Зависимости[Инд]);
	КонецЦикла;
	
КонецПроцедуры

Функция КлючЗависимости(ОписаниеЗависимости)
	
	Идентификатор = ВРег(ОписаниеЗависимости.Идентификатор);
	
	Если ЗначениеЗаполнено(ОписаниеЗависимости.Параметры) Тогда
		Возврат ЮТОбщий.СтрокаJSON(Новый Структура("Идентификатор, Параметры", Идентификатор, ОписаниеЗависимости.Параметры));
	Иначе
		Возврат Идентификатор;
	КонецЕсли;
	
КонецФункции

Функция УникальнаяЗависимость(Зависимости, ОписаниеЗависимости) Экспорт
	
	КлючЗависимости = КлючЗависимости(ОписаниеЗависимости);
	
	УникальнаяЗависимость = Зависимости[КлючЗависимости];
	
	Если УникальнаяЗависимость <> Неопределено Тогда
		Возврат УникальнаяЗависимость;
	КонецЕсли;
	
	Копия = ЮТКоллекции.СкопироватьСтруктуру(ОписаниеЗависимости);
	Копия.Параметры = Новый ФиксированныйМассив(ОписаниеЗависимости.Параметры);
	Копия.Ключ = КлючЗависимости;
	
	УникальнаяЗависимость = Новый ФиксированнаяСтруктура(Копия);
	
	Зависимости.Вставить(КлючЗависимости, УникальнаяЗависимость);
	
	Возврат УникальнаяЗависимость;
	
КонецФункции

Функция ПредставлениеЗависимости(ОписаниеЗависимости)
	
	Возврат ОписаниеЗависимости.Идентификатор;
	
КонецФункции

Функция ОписаниеОшибкиПропуска(Описание, ИнформацияОбОшибке = Неопределено)
	
	Ошибка = ЮТФабрикаСлужебный.ОписаниеОшибкиПропуска(Описание);
	Если ИнформацияОбОшибке <> Неопределено Тогда
		Ошибка.Стек = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

Функция УстановитьОшибкиВ(Объекты, Ошибка)
	
	Для Каждого Объект Из Объекты Цикл
		Объект.Ошибки.Добавить(Ошибка);
		Объект.Выполнять = Ложь;
	КонецЦикла;
	
	Возврат Ошибка;
	
КонецФункции

Функция ИмяКонтекстаРазрешенныеЗависимости() Экспорт
	
	Возврат "КонтекстРазрешенныеЗависимости";
	
КонецФункции

Функция ИмяКонтекстаДанныеЗависимостей() Экспорт
	
	Возврат "КонтекстДанныеЗависимостей";
	
КонецФункции

#КонецОбласти

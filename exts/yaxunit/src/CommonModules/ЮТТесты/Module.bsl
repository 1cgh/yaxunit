//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2022 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

/////////////////////////////////////////////////////////////////////////////////
// Содержит методы создания тестов и тестовых наборов
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции, предназначенные для использования другими 
// объектами конфигурации или другими программами
///////////////////////////////////////////////////////////////////////////////// 
#Область ПрограммныйИнтерфейс

// ТестовыйНабор
//  Создает и регистрирует набор, в который будут добавлятся последующие тесты
// Параметры:
//  Имя - Строка -  Имя набора тестов
//  ТегиСтрокой - Строка - Теги относящиеся к набору и вложенным тестам. Это строка разделенная запятыми
// 
// Возвращаемое значение:
//  CommonModule.ЮТТесты - Этот же модуль, для замыкания
Функция ТестовыйНабор(Имя, ТегиСтрокой = "") Экспорт
	
	ИсполняемыеСценарии = СценарииМодуля();
	
	Если Не ЭтоИсполняемыеСценарии(ИсполняемыеСценарии) Тогда
		ВызватьИсключение "Первый параметр должен быть результатом метода ЮТТесты.ИсполняемыеСценарии";
	КонецЕсли;
	
	Если ПустаяСтрока(Имя) Тогда
		ВызватьИсключение "Имя тестового набора не может быть пустым";
	КонецЕсли;
	
	Контекст = Контекст();
	НовыйТестовыйНабор = ЮТФабрика.ОписаниеТестовогоНабора(Имя, ТегиСтрокой);
	
	ИсполняемыеСценарии.ТестовыеНаборы.Вставить(Имя, НовыйТестовыйНабор);
	Контекст.ТекущийНабор = НовыйТестовыйНабор;
	Контекст.ТекущийЭлемент = НовыйТестовыйНабор;
	
	Возврат ЮТТесты;
	
КонецФункции

// Тест
//  Регистрирует тест
// Параметры:
//  ИмяТестовогоМетода - Строка - Имя тестового метода
//  ПредставлениеТеста - Строка - Представление теста
//  ТегиСтрокой - Строка - Теги строкой. Это строка разделенная запятыми
//  Контексты - Строка - Контексты, строка перечисления контекстов вызова, разделенных запятой.
//                       Возможные значения см. ЮТФабрика.КонтекстыВызова
// Возвращаемое значение:
//  CommonModule.ЮТТесты - Этот же модуль, для замыкания
Функция Тест(ИмяТестовогоМетода, ПредставлениеТеста = "", ТегиСтрокой = "", Контексты = Неопределено) Экспорт
	
	Контекст = Контекст();
	Набор = Контекст.ТекущийНабор;
	
	ЭтоИсполняемыеСценарии = ЭтоИсполняемыеСценарии(Набор);
	ЭтоТестовыйНабор = ЭтоТестовыйНабор(Набор);
	
	Если Не (ЭтоИсполняемыеСценарии Или ЭтоТестовыйНабор) Тогда
		ВызватьИсключение "Первый параметр должен быть результатом метода ЮТТесты.ИсполняемыеСценарии или ЮТТесты.ТестовыйНабор";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТестовогоМетода) Тогда
		ВызватьИсключение "Имя тестового метода не может быть пустым";
	КонецЕсли;
	
	Тест = ОписаниеТеста(ИмяТестовогоМетода, ПредставлениеТеста, ТегиСтрокой, Контексты);
	Набор.Тесты.Добавить(Тест);
	Контекст.ТекущийЭлемент = Тест;
	
	Возврат ЮТТесты;
	
КонецФункции

// ТестКлиент
//  Регистрирует текст вызывемый на клиенте
// Параметры:
//  ИмяТестовогоМетода - Строка - Имя тестового метода
//  ПредставлениеТеста - Строка - Представление теста
//  ТегиСтрокой - Строка - Теги строкой. Это строка разделенная запятыми
// 
// Возвращаемое значение:
//  CommonModule.ЮТТесты - Этот же модуль, для замыкания
Функция ТестКлиент(ИмяТестовогоМетода, ПредставлениеТеста = "", ТегиСтрокой = "") Экспорт
	
	Тест(ИмяТестовогоМетода, ПредставлениеТеста, ТегиСтрокой, КонтекстыВызоваКлиента());
	
	Возврат ЮТТесты;
	
КонецФункции

// Тест сервер.
//  Регистрирует текст вызывемый на сервере
// Параметры:
//  ИмяТестовогоМетода - Строка - Имя тестового метода
//  ПредставлениеТеста - Строка - Представление теста
//  ТегиСтрокой - Строка - Теги строкой. Это строка разделенная запятыми
// 
// Возвращаемое значение:
//  CommonModule.ЮТТесты - Этот же модуль, для замыкания
Функция ТестСервер(ИмяТестовогоМетода, ПредставлениеТеста = "", ТегиСтрокой = "") Экспорт
	
	Режимы = ЮТФабрика.КонтекстыВызова();
	
	Тест(ИмяТестовогоМетода, ПредставлениеТеста, ТегиСтрокой, Режимы.Сервер);
	
	Возврат ЮТТесты;
	
КонецФункции

// Устанавливает настройку выполнения тестового метода
// 
// Параметры:
//  ИмяПараметра - Строка
//  Значение - Произвольный - Значение настройки 
// 
// Возвращаемое значение:
//  CommonModule.ЮТТесты - Этот же модуль, для замыкания
Функция НастройкаИсполнения(ИмяПараметра, Значение) Экспорт
	
	Контекст = Контекст();
	
	Если Контекст.ТекущийЭлемент = Неопределено Тогда
		ВызватьИсключение "Не инициализированы настройки регистрации тестов";
	КонецЕсли;
	
	Контекст.ТекущийЭлемент.НастройкиВыполнения.Вставить(ИмяПараметра, Значение);
	
	Возврат ЮТТесты;
	
КонецФункции

// Устанавливает настройку выполнения тестового метода в транзакции.
// 
// Параметры:
//  ВыполнятьВТранзакции - Булево
// 
// Возвращаемое значение:
//  CommonModule.ЮТТесты - Этот же модуль, для замыкания
Функция ВТранзакции(ВыполнятьВТранзакции = Истина) Экспорт
	
	НастройкаИсполнения(ЮТФабрика.ПараметрыИсполненияТеста().ВТранзакции, ВыполнятьВТранзакции);
	
	Возврат ЮТТесты;
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции для служебного использования внутри подсистемы
///////////////////////////////////////////////////////////////////////////////// 

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПередЧтениемСценариевМодуля(МетаданныеМодуля) Экспорт
	
	ИнициализироватьКонтекст(МетаданныеМодуля);
	
КонецПроцедуры

// Описание сценариев модуля
// 
// Возвращаемое значение:
//  Структура - см. ИсполняемыеСценарии
Функция СценарииМодуля() Экспорт
	
	Возврат Контекст().ИсполняемыеСценарии;
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, составляющие внутреннюю реализацию модуля 
///////////////////////////////////////////////////////////////////////////////// 

#Область СлужебныеПроцедурыИФункции

// Исполняемые сценарии.
// 
// Возвращаемое значение:
//  Структура - Исполняемые сценарии:
// * ТестовыеНаборы - Соответствие - Тестовые наборы модуля
//   * Ключ - Строка - Имя тестового набора
//   * Значение - см. ЮТФабрика.ОписаниеТестовогоНабора
Функция ИсполняемыеСценарии()
	
	Структура = Новый Структура;
	Структура.Вставить("ТестовыеНаборы", Новый Соответствие);
	
	НаборПоУмолчанию = ЮТФабрика.ОписаниеТестовогоНабора("Тесты");
	Структура.ТестовыеНаборы.Вставить(НаборПоУмолчанию.Имя, НаборПоУмолчанию);
	
	Возврат Структура;
	
КонецФункции

Функция КонтекстыВызоваКлиента()
	
	Режимы = ЮТФабрика.КонтекстыВызова();
	
	Возврат СтрШаблон("%1, %2", Режимы.КлиентУправляемоеПриложение, Режимы.КлиентОбычноеПриложение);
	
КонецФункции

Функция КонтекстыВызоваПоУмолчанию()
	
	Возврат СтрСоединить(ЮТФабрика.КонтекстыМодуля(Контекст().МетаданныеМодуля), ", ");
	
КонецФункции

Функция ОписаниеТеста(Имя, Знач Представление, ТегиСтрокой, Знач Контексты)
	
	Если НЕ ЗначениеЗаполнено(Контексты) Тогда
		Контексты = КонтекстыВызоваПоУмолчанию();
	КонецЕсли;
	
	Возврат ЮТФабрика.ОписаниеТеста(Имя, Представление, Контексты, ТегиСтрокой);
	
КонецФункции

Функция ЭтоИсполняемыеСценарии(ИсполняемыеСценарии)
	
	Возврат ТипЗнч(ИсполняемыеСценарии) = Тип("Структура")
		И ТипЗнч(ЮТОбщий.ЗначениеСтруктуры(ИсполняемыеСценарии, "ТестовыеНаборы")) = Тип("Соответствие");
	
КонецФункции

Функция ЭтоТестовыйНабор(ТестовыйНабор)
	
	Возврат ТипЗнч(ТестовыйНабор) = Тип("Структура")
		И ТипЗнч(ЮТОбщий.ЗначениеСтруктуры(ТестовыйНабор, "Тесты")) = Тип("Массив");
	
КонецФункции

Функция ЭтоОписаниеТеста(Описание)
	
	Возврат ТипЗнч(Описание) = Тип("Структура")
		И ТипЗнч(ЮТОбщий.ЗначениеСтруктуры(Описание, "КонтекстВызова")) = Тип("Массив");
	
КонецФункции

Функция ТестовыйНаборПоУмолчанию(ИсполняемыеСценарии)
	
	Возврат ИсполняемыеСценарии.ТестовыеНаборы["Тесты"];
	
КонецФункции

#Область Контекст

Функция Контекст()
	
	Возврат ЮТКонтекст.ЗначениеКонтекста("КонтекстРегистрацияТестов");
	
КонецФункции

Процедура ИнициализироватьКонтекст(МетаданныеМодуля)
	
	КонтекстРегистрации = ОписаниеКонтекстаРегистрацииСценариев(МетаданныеМодуля);
	
	ЮТКонтекст.УстановитьЗначениеКонтекста("КонтекстРегистрацияТестов", КонтекстРегистрации);
		
КонецПроцедуры

// Описание контекста регистрации сценариев.
// 
// Параметры:
//  МетаданныеМодуля - Структура - Метаданные модуля, см. ЮТФабрика.ОписаниеМодуля
// 
// Возвращаемое значение:
//  Структура - Описание контекста регистрации сценариев:
// * МетаданныеМодуля - см. ЮТФабрика.ОписаниеМодуля
// * ИсполняемыеСценарии - Структура -:
// ** ТестовыеНаборы - Соответствие -
Функция ОписаниеКонтекстаРегистрацииСценариев(МетаданныеМодуля)
	
	ИсполняемыеСценарии = ИсполняемыеСценарии();
	Набор = ТестовыйНаборПоУмолчанию(ИсполняемыеСценарии);
	Набор.Представление = МетаданныеМодуля.Имя;
	
	Контекст = Новый Структура();
	
	Контекст.Вставить("МетаданныеМодуля", МетаданныеМодуля);
	Контекст.Вставить("ИсполняемыеСценарии", ИсполняемыеСценарии);
	Контекст.Вставить("ТекущийНабор", Набор);
	Контекст.Вставить("ТекущийЭлемент", Набор);
	
	Возврат Контекст;
	
КонецФункции

#КонецОбласти

#КонецОбласти

//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2022 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции, предназначенные для использования другими 
// объектами конфигурации или другими программами
///////////////////////////////////////////////////////////////////////////////// 
#Область ПрограммныйИнтерфейс

#Область УтвержденияBDD

// Что
//  Подготавливает Контекст для проверки утверждения.
//  Проверка выполнения выполняется через вызов другого метода
//  Например: ЮТУтверждения.Что(...).ЭтоИстина(...);
// 
// Параметры:
//  ПроверяемоеЗначение - Произвольный -  Проверяемое фактическое значение
//  Сообщение - Строка - Описание проверки, которое будет выведено при возникновении ошибки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Что(Знач ПроверяемоеЗначение, Знач Сообщение = "") Экспорт
	
	Контекст = ИнициализироватьКонтекстУтверждения();
	Контекст.ПроверяемоеЗначение = ПроверяемоеЗначение;
	Контекст.ПрефиксОшибки = Сообщение;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Метод
//  Запоминает описание метода (имя и параметры) для последующей проверки
// 
// Параметры:
//  ИмяМетода - Строка - Наименование метода
//  ПараметрыМетода - Массив - Параметры вызываемого метода
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Метод(Знач ИмяМетода, Знач ПараметрыМетода = Неопределено) Экспорт
	
	ПроверитьТипЗначения(ИмяМетода, "Строка", "имени метода", Истина);
	ПроверитьТипЗначения(ПараметрыМетода, "Массив", "параметров метода", Истина);
	
	Контекст = Контекст();
	
	Контекст.ИмяМетода = ИмяМетода;
	
	Контекст.ПараметрыМетода = ПараметрыМетода;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Параметр
//  Добавляет параметр метода для последующего вызова метода и проверки
// 
// Параметры:
//  ЗначениеПараметра - Произвольный - Параметр вызываемого метода
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Параметр(Знач ЗначениеПараметра) Экспорт
	
	Контекст = Контекст();
	
	Если НЕ ЗначениеЗаполнено(Контекст.ИмяМетода) Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения("Перед установкой параметров нужно указать метод");
	КонецЕсли;
	
	Если Контекст.ПараметрыМетода = Неопределено Тогда
		Контекст.ПараметрыМетода = ЮТОбщий.ЗначениеВМассиве(ЗначениеПараметра);
	Иначе
		Контекст.ПараметрыМетода.Добавить(ЗначениеПараметра);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Свойство
//  Проверяет наличие свойства и запоминает имя свойства для последующей проверки
//  Следующая проверка будет относится к этому свойству
// 
// Параметры:
//  ИмяСвойства - Строка - Наименование свойства объекта.
//  						Возможно обращение к вложенным свойствам через точку
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Свойство(Знач ИмяСвойства) Экспорт
	
	Контекст = Контекст();
	Контекст.ИмяСвойства = "";
	Контекст.СброситьИмяСвойства = Ложь;
	
	ЭтоДействительнаяЦепочкаСвойств(Контекст.ПроверяемоеЗначение, ИмяСвойства);
	
	Контекст.ИмяСвойства = ИмяСвойства;
	Контекст.СброситьИмяСвойства = Ложь;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// ЭтоИстина
//  Проверяет установленное значение Контекста (или его свойство) на равность значению "Истина" (Булево).
//  При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоИстина() Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ЗначенияРавны(ПроверяемоеЗначение, Истина);
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения("является истиной", Истина, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// ЭтоНеИстина
//  Проверяет установленное значение Контекста (или его свойство)на НЕ равность значению "Истина" (Булево).
//  При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоНеИстина() Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = НЕ ЗначенияРавны(ПроверяемоеЗначение, Истина);
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения("не является истиной", Ложь, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// ЭтоЛожь
//  Проверяет установленное значение Контекста (или его свойство) на равность значению "Ложь" (Булево).
//  При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоЛожь() Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ЗначенияРавны(ПроверяемоеЗначение, Ложь);
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения("является ложью", Ложь, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// ЭтоНеЛожь
//  Проверяет установленное значение Контекста (или его свойство) на НЕ равность значению "Ложь" (Булево).
//  При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоНеЛожь() Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = НЕ ЗначенияРавны(ПроверяемоеЗначение, Ложь);
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения("не является ложью", Истина, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Равно
//  Проверяет установленное значение Контекста (или его свойство) на равность ожидаемому.
//  При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) равно этому значению
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Равно(Знач ОжидаемоеЗначение) Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ЗначенияРавны(ПроверяемоеЗначение, ОжидаемоеЗначение);
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
		
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения(СтрШаблон("равно `%1`", ОжидаемоеЗначение), ОжидаемоеЗначение, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// НеРавно
//  Проверяет установленное значение Контекста (или его свойство) на НЕ равность ожидаемому.
//  При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) НЕ равно этому значению
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеРавно(Знач ОжидаемоеЗначение) Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = НЕ ЗначенияРавны(ПроверяемоеЗначение, ОжидаемоеЗначение);
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения(СтрШаблон("не равно `%1`", ОжидаемоеЗначение), ОжидаемоеЗначение, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Больше
//  Проверяет установленное значение Контекста (или его свойство), оно должно быть больше ожидаемого.
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) Больше этого значения
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Больше(Знач ОжидаемоеЗначение) Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ПроверяемоеЗначение > ОжидаемоеЗначение;
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения(СтрШаблон("больше чем `%1`", ОжидаемоеЗначение), ОжидаемоеЗначение, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// БольшеИлиРавно
//  Проверяет установленное значение Контекста (или его свойство), оно должно быть больше или равно ожидаемому.
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) Больше этого значения или равно ему
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция БольшеИлиРавно(Знач ОжидаемоеЗначение) Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ПроверяемоеЗначение >= ОжидаемоеЗначение;
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения(СтрШаблон("больше или равно `%1`", ОжидаемоеЗначение), ОжидаемоеЗначение, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Меньше
//  Проверяет установленное значение Контекста (или его свойство), оно должно быть меньше ожидаемого.
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) меньше этого значения
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Меньше(Знач ОжидаемоеЗначение) Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ПроверяемоеЗначение < ОжидаемоеЗначение;
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения(СтрШаблон("меньше чем `%1`", ОжидаемоеЗначение), ОжидаемоеЗначение, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// МеньшеИлиРавно
//  Проверяет установленное значение Контекста (или его свойство), оно должно быть меньше или равно ожидаемому.
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) меньше этого значения или равно ему
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция МеньшеИлиРавно(Знач ОжидаемоеЗначение) Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ПроверяемоеЗначение <= ОжидаемоеЗначение;
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения(СтрШаблон("меньше или равно `%1`", ОжидаемоеЗначение), ОжидаемоеЗначение, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Заполнено
//  Проверяет установленное значение Контекста (или его свойство) на "заполненность" (обертка для ЗначениеЗаполнено)
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Заполнено() Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения("является заполненным", Истина, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// НеЗаполнено
//  Проверяет установленное значение Контекста (или его свойство) на "не заполненность" (обертка для ЗначениеЗаполнено)
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеЗаполнено() Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = Не ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения("не является заполненным", Истина, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Существует
//  Проверяет установленное значение Контекста (или его свойство) на "существование", т.е. отличие от Null и Неопределено.
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Существует() Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ПроверяемоеЗначение <> Null И ПроверяемоеЗначение <> Неопределено;
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения("существует", Истина, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// НеСуществует
// Проверяет установленное значение Контекста (или его свойство) на "не существование", т.е. оно равно Null или Неопределено.
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеСуществует() Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ПроверяемоеЗначение = Null Или ПроверяемоеЗначение = Неопределено;
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения("не существует", Истина, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// ЭтоНеопределено
//  Проверяет установленное значение Контекста (или его свойство) не равность Неопределено.
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоНеопределено() Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ПроверяемоеЗначение = Неопределено;
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения("является неопределено", Истина, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// ЭтоНеНеопределено
//  Проверяет установленное значение Контекста (или его свойство) на не равность Неопределено
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоНеНеопределено() Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ПроверяемоеЗначение <> Неопределено;
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения("не является неопределено", Истина, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// ЭтоNull
//  Проверяет установленное значение Контекста (или его свойство) на равность Null.
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоNull() Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ПроверяемоеЗначение = Null;
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения("является null", Истина, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// ЭтоНеNull
//  Проверяет установленное значение Контекста (или его свойство) на не равность Null
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоНеNull() Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ПроверяемоеЗначение <> Null;
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения("не является null", Истина, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// ИмеетТип
//  Проверяет установленное значение Контекста (или его свойство) на соответствие переданному типу.
// 
// Параметры:
//  ОжидаемоеЗначение - Строка, Тип - Ожидается, что значение Контекста (или его свойство) имеет данный тип
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ИмеетТип(Знач ОжидаемоеЗначение) Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		ОжидаемыйТип = ?(ТипЗнч(ОжидаемоеЗначение) = Тип("Строка"), Тип(ОжидаемоеЗначение), ОжидаемоеЗначение);
		
		ПроверитьТипЗначения(ОжидаемыйТип, Новый ОписаниеТипов("Тип, Строка"));
		
		Результат = ТипЗнч(ПроверяемоеЗначение) = ОжидаемыйТип;
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения(СтрШаблон("имеет тип `%1`", ОжидаемоеЗначение), Истина, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// НеИмеетТип
//  Проверяет установленное значение Контекста (или его свойство) на несоответствие переданному типу.
// 
// Параметры:
//  ОжидаемоеЗначение - Строка, Тип - Ожидается, что значение Контекста (или его свойство) НЕ имеет данный тип
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеИмеетТип(Знач ОжидаемоеЗначение) Экспорт

	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		ОжидаемыйТип = ?(ТипЗнч(ОжидаемоеЗначение) = Тип("Строка"), Тип(ОжидаемоеЗначение), ОжидаемоеЗначение);
		
		ПроверитьТипЗначения(ОжидаемыйТип, Новый ОписаниеТипов("Тип, Строка"));
		
		Результат = ТипЗнч(ПроверяемоеЗначение) <> ОжидаемыйТип;
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения(СтрШаблон("не имеет тип `%1`", ОжидаемоеЗначение), Истина, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Содержит
//  Проверяет установленное значение Контекста (или его свойство) на наличие в нем искомого.
//  Проверка поддерживается для следующих типов проверяемого значения: 
//  	- Строка - по вхождению
//  	- Массив - по наличию равного элемента
//  	- Структура - по наличию равного значения
//  	- Соответствие - по наличию равного значения
//  	- СписокЗначений - по наличию равного значения
//  	- ФиксированныйМассив - по наличию равного значения
//  	- ФиксированнаяСтруктура - по наличию равного значения
//  	- ФиксированноеСоответствие - по наличию равного значения
//  При сравнении также проверяется совпадение типов
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) содержит указанное значение
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Содержит(Знач ОжидаемоеЗначение) Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		ИскомоеЗначениеНайдено = НайтиЗначение(ПроверяемоеЗначение, ОжидаемоеЗначение);
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если ИскомоеЗначениеНайдено = Неопределено Тогда
		ТекстОшибки = СтрШаблон("Тип проверяемого значения `%1` не обрабатывается утверждением", ТипЗнч(ПроверяемоеЗначение));
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ТекстОшибки);
	ИначеЕсли Не ИскомоеЗначениеНайдено Тогда
		ТекстОшибки = СтрШаблон("содержит `%1`", ОжидаемоеЗначение);
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения(ТекстОшибки, Истина, ПроверяемоеЗначение);
	Иначе
		Возврат ЮТУтверждения;
	КонецЕсли;

КонецФункции

// НеСодержит
//  Проверяет установленное значение Контекста (или его свойство) на наличие в нем искомого.
//  Проверка поддерживается для следующих типов проверяемого значения: 
//  	- Строка - по отсутствию вхождению
//  	- Массив - по отсутствию равного элемента
//  	- Структура - по отсутствию равного значения
//  	- Соответствие - по отсутствию равного значения
//  	- СписокЗначений - по отсутствию равного значения
//  	- ФиксированныйМассив - по отсутствию равного значения
//  	- ФиксированнаяСтруктура - по отсутствию равного значения
//  	- ФиксированноеСоответствие - по отсутствию равного значения
//  При сравнении также проверяется совпадение типов
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) НЕ содержит указанное
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеСодержит(Знач ОжидаемоеЗначение) Экспорт
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		ИскомоеЗначениеНайдено = НайтиЗначение(ПроверяемоеЗначение, ОжидаемоеЗначение);
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если ИскомоеЗначениеНайдено = Неопределено Тогда
		ТекстОшибки = СтрШаблон("Тип проверяемого значения `%1` не обрабатывается утверждением", ТипЗнч(ПроверяемоеЗначение));
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ТекстОшибки);
	ИначеЕсли ИскомоеЗначениеНайдено Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения(СтрШаблон("не содержит `%1`", ОжидаемоеЗначение), Истина, ПроверяемоеЗначение);
	Иначе
		Возврат ЮТУтверждения;
	КонецЕсли;
	
КонецФункции

// ИмеетДлину
//  Проверяет установленное значение Контекста (или его свойство) на длину или размер коллекции
//  Проверка поддерживается для следующих типов проверяемого значения: 
//  	- Строка
//  	- Массив
//  	- Структура
//  	- Соответствие
//  	- СписокЗначений
//  	- ФиксированныйМассив
//  	- ФиксированнаяСтруктура
//  	- ФиксированноеСоответствие
// 
// Параметры:
//  ОжидаемоеЗначение - Число - Ожидается, что значение Контекста (или его свойство) имеет указанную дину или размер
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ИмеетДлину(Знач ОжидаемоеЗначение) Экспорт
	
	ПроверитьТипЗначения(ОжидаемоеЗначение, "Число");
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		ФактическаяДлина = ДлинаЗначения(ПроверяемоеЗначение);
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если ФактическаяДлина = Неопределено Тогда
		ТекстОшибки = СтрШаблон("Тип проверяемого значения `%1` не обрабатывается утверждением", ТипЗнч(ПроверяемоеЗначение));
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ТекстОшибки);
	КонецЕсли;
	
	Попытка
		Результат = ФактическаяДлина = ОжидаемоеЗначение;
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если НЕ Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения(СтрШаблон("имеет длину (размер) `%1`", ОжидаемоеЗначение), Истина, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// НеИмеетДлину
//  Проверяет установленное значение Контекста (или его свойство) на длину или размер коллекции, которые не должны совпадать с указанным значением
// 
// Параметры:
//  ОжидаемоеЗначение - Число - Ожидается, что значение Контекста (или его свойство) не имеет указанную дину или размер
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеИмеетДлину(Знач ОжидаемоеЗначение) Экспорт
	
	ПроверитьТипЗначения(ОжидаемоеЗначение, "Число");
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		ФактическаяДлина = ДлинаЗначения(ПроверяемоеЗначение);
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если ФактическаяДлина = Неопределено Тогда
		ТекстОшибки = СтрШаблон("Тип проверяемого значения `%1` не обрабатывается утверждением", ТипЗнч(ПроверяемоеЗначение));
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ТекстОшибки);
	КонецЕсли;
	
	Попытка
		Результат = ФактическаяДлина = ОжидаемоеЗначение;
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения(СтрШаблон("не имеет длину (размер) `%1`", ОжидаемоеЗначение), Истина, ПроверяемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// ВыбрасываетИсключение
//  Проверяет установленный для проверки метод Контекста на то, что метод упадет по исключению, 
//  далее текст исключения проверяется на ожидаемый.
// 
// Параметры:
//  ОжидаемоеЗначение - Строка - Ожидается, что сообщение об ошибке будет содержать данный текст
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ВыбрасываетИсключение(Знач ОжидаемоеЗначение) Экспорт
	
	Попытка
		Контекст = Контекст();
		Модуль = ПроверяемоеЗначение();
		
		Результат = ВызватьМетод(Модуль, Контекст.ИмяМетода, Контекст.ПараметрыМетода);
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	ЮТРегистрацияОшибок.УстановитьДанныеОшибкиСравнения(ОжидаемоеЗначение, Результат.ТекстИсключения);
	
	Если Не Результат.ИсключениеВозникло Тогда
		ТекстОшибки = СтрШаблон("ожидали, что метод `%1` вызовет исключение `%2`, но это не так.", Контекст.ИмяМетода, ОжидаемоеЗначение);
		ЮТРегистрацияОшибок.ВызватьОшибкуПроверки(ТекстОшибки);
	ИначеЕсли СтрНайти(Результат.ТекстИсключения, ОжидаемоеЗначение) = 0 Тогда
		ТекстОшибки = СтрШаблон("ожидали, что метод `%1` вызовет исключение `%2`, но получили `%3`.",
			Контекст.ИмяМетода,
			ОжидаемоеЗначение,
			Результат.ТекстИсключения);
		ЮТРегистрацияОшибок.ВызватьОшибкуПроверки(ТекстОшибки);
	Иначе
		Возврат ЮТУтверждения;
	КонецЕсли;
	
КонецФункции

// НеВыбрасываетИсключение
//  Проверяет установленный для проверки метод Контекста на то, что метод не упадет по исключению
//  или упадет по исключению текст которого не содержит ожидаемый
// 
// Параметры:
//  ОжидаемоеЗначение - Строка - Ожидается, что сообщение об ошибке НЕ будет содержать данный текст
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеВыбрасываетИсключение(Знач ОжидаемоеЗначение = Неопределено) Экспорт
	
	Попытка
		Контекст = Контекст();
		Модуль = ПроверяемоеЗначение();
		
		Результат = ВызватьМетод(Модуль, Контекст.ИмяМетода, Контекст.ПараметрыМетода)
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Результат.ИсключениеВозникло Тогда
		ЮТРегистрацияОшибок.УстановитьДанныеОшибкиСравнения(ОжидаемоеЗначение, Результат.ТекстИсключения);
		
		Если НЕ ЗначениеЗаполнено(ОжидаемоеЗначение) Тогда
			ТекстОшибки = СтрШаблон("ожидали, что метод `%1` не вызовет исключение, но это не так.", Контекст.ИмяМетода);
			ЮТРегистрацияОшибок.ВызватьОшибкуПроверки(ТекстОшибки);
		ИначеЕсли СтрНайти(Результат.ТекстИсключения, ОжидаемоеЗначение) <> 0 Тогда
			ТекстОшибки = СтрШаблон("ожидали, что метод `%1` не вызовет исключение `%2`, но это не так.", Контекст.ИмяМетода, ОжидаемоеЗначение);
			ЮТРегистрацияОшибок.ВызватьОшибкуПроверки(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;

	Возврат ЮТУтверждения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции для служебного использования внутри подсистемы
///////////////////////////////////////////////////////////////////////////////// 

#Область СлужебныйПрограммныйИнтерфейс

// Сбросить контекст.
// Используется для принудительного сброса контекста утверждения
Процедура СброситьКонтекст() Экспорт
	
	ИнициализироватьКонтекстУтверждения();
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, составляющие внутреннюю реализацию модуля 
///////////////////////////////////////////////////////////////////////////////// 

#Область СлужебныеПроцедурыИФункции

#Область Контекст

Функция НовыйКонтекстУтверждения()
	
	Контекст = Новый Структура;
	
	Контекст.Вставить("ПроверяемоеЗначение", Неопределено);
	Контекст.Вставить("ПрефиксОшибки", "");
	Контекст.Вставить("ИмяМетода", "");
	Контекст.Вставить("ИмяСвойства", "");
	Контекст.Вставить("СброситьИмяСвойства", Ложь);
	Контекст.Вставить("ПараметрыМетода", Неопределено);
	
	Возврат Контекст;
КонецФункции

Функция ИнициализироватьКонтекстУтверждения()
	
	Контекст = НовыйКонтекстУтверждения();
	
	ЮТКонтекст.УстановитьКонтекстУтверждений(Контекст);
	ЮТКонтекст.УстановитьКонтекстОшибки();
	
	Возврат Контекст;
	
КонецФункции

Функция Контекст() Экспорт
	
	КонтекстУтверждения = ЮТКонтекст.КонтекстПроверки();
	
	Если КонтекстУтверждения = Неопределено Тогда
		КонтекстУтверждения = ИнициализироватьКонтекстУтверждения();
	КонецЕсли;
	
	Возврат КонтекстУтверждения;
	
КонецФункции

#КонецОбласти

Функция ПроверяемоеЗначение()
	
	Контекст = Контекст();
	
	Если Контекст.СброситьИмяСвойства Тогда
		Контекст.ИмяСвойства = "";
		Контекст.СброситьИмяСвойства = Ложь;
	КонецЕсли;
	
	Значение = Контекст.ПроверяемоеЗначение;
	
	Если ЗначениеЗаполнено(Контекст.ИмяСвойства) Тогда
		
		Если ТипЗнч(Контекст.ИмяСвойства) = Тип("Строка") Тогда
			
			Части = СтрРазделить(Контекст.ИмяСвойства, ".");
			
			Для Каждого Часть Из Части Цикл
				
				Значение = Значение[Часть];
				
			КонецЦикла;
			
		Иначе
			
			Значение = Значение[Контекст.ИмяСвойства]; // Для соответствий
			
		КонецЕсли;
		
		Контекст.СброситьИмяСвойства = Истина;
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ЗначенияРавны(Значение1, Значение2)
	
	Возврат Значение1 = Значение2 И ТипЗнч(Значение1) = ТипЗнч(Значение2);
	 
КонецФункции

Функция ЭтоДействительнаяЦепочкаСвойств(Знач Значение, Цепочка)
	
	НачальноеЗначение = Значение;
	
	Если ТипЗнч(Цепочка) = Тип("Строка") Тогда
		
		Части = СтрРазделить(Цепочка, ".");
		
		ПройденныйПуть = Новый Массив();
		
		Для Каждого Часть Из Части Цикл
			
			ПройденныйПуть.Добавить(Часть);
			
			Попытка
				ЕстьСвойство = ЗначениеИмеетСвойство(Значение, Часть);
			Исключение
				ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
			КонецПопытки;
			
			Если ЕстьСвойство Тогда
				Значение = Значение[Часть];
			Иначе
				ПутьСвойства = СтрСоединить(ПройденныйПуть, ".");
				ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения(СтрШаблон("содержит свойство `%1`", ПутьСвойства), ПутьСвойства, НачальноеЗначение);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Попытка
			Возврат ЗначениеИмеетСвойство(Значение, Цепочка); // Для соответствий
		Исключение
			ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

Функция ЗначениеИмеетСвойство(Значение, Свойство)
	
	Результат = Ложь;
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("Структура") Или ТипЗначения = Тип("ФиксированнаяСтруктура") Тогда
		
		Результат = Значение.Свойство(Свойство);
		
	ИначеЕсли ТипЗначения = Тип("Соответствие") Или ТипЗначения = Тип("ФиксированноеСоответствие") Тогда
		
		Для Каждого КлючЗначение Из Значение Цикл
			
			Если КлючЗначение.Ключ = Свойство И ТипЗнч(КлючЗначение.Ключ) = ТипЗнч(Свойство) Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Результат = ЮТОбщий.ПеременнаяСодержитСвойство(Значение, Свойство);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиЗначение(ПроверяемоеЗначение, ОжидаемоеЗначение)
	
	ТипПроверяемогоЗначения = ТипЗнч(ПроверяемоеЗначение);
	ИскомоеЗначениеНайдено = Неопределено;
	
	Если ТипПроверяемогоЗначения = Тип("Строка") Тогда
		
		ИскомоеЗначениеНайдено = СтрНайти(ПроверяемоеЗначение, ОжидаемоеЗначение) > 0;
		
	ИначеЕсли ЭтоТипМассива(ТипПроверяемогоЗначения) Тогда
		
		Индекс = ПроверяемоеЗначение.Найти(ОжидаемоеЗначение);
		ИскомоеЗначениеНайдено = Индекс <> Неопределено И ТипЗнч(ПроверяемоеЗначение[Индекс]) = ТипЗнч(ОжидаемоеЗначение);
		
	ИначеЕсли ЭтоТипКлючЗначение(ТипПроверяемогоЗначения) Тогда
		
		ИскомоеЗначениеНайдено = Ложь;
		ТипОжидаемогоЗначения = ТипЗнч(ОжидаемоеЗначение);
		
		Для Каждого КлючЗначение Из ПроверяемоеЗначение Цикл
			Если КлючЗначение.Значение = ОжидаемоеЗначение И ТипЗнч(КлючЗначение.Значение) = ТипОжидаемогоЗначения Тогда
				ИскомоеЗначениеНайдено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипПроверяемогоЗначения = Тип("СписокЗначений") Тогда
		
		ИскомоеЗначениеНайдено = ПроверяемоеЗначение.НайтиПоЗначению(ОжидаемоеЗначение) <> Неопределено;
		
	КонецЕсли;
	
	Возврат ИскомоеЗначениеНайдено;
	
КонецФункции

Функция ДлинаЗначения(ПроверяемоеЗначение)
	
	ТипПроверяемогоЗначения = ТипЗнч(ПроверяемоеЗначение);
	ФактическаяДлина = Неопределено;
	
	Если ТипПроверяемогоЗначения = Тип("Строка") Тогда
		
		ФактическаяДлина = СтрДлина(ПроверяемоеЗначение);
		
	ИначеЕсли ЭтоТипМассива(ТипПроверяемогоЗначения)
		Или ЭтоТипКлючЗначение(ТипПроверяемогоЗначения)
		Или ТипПроверяемогоЗначения = Тип("СписокЗначений") Тогда
		
		ФактическаяДлина = ПроверяемоеЗначение.Количество();
		
	КонецЕсли;
	
	Возврат ФактическаяДлина;
	
КонецФункции

Функция ЭтоТипМассива(Тип)
	
	Возврат Тип = Тип("Массив") Или Тип = Тип("ФиксированныйМассив");
	
КонецФункции

Функция ЭтоТипКлючЗначение(Тип)
	
	Возврат Тип = Тип("Структура") Или Тип = Тип("ФиксированнаяСтруктура")
		Или Тип = Тип("Соответствие") Или Тип = Тип("ФиксированноеСоответствие");
	
КонецФункции

Функция ВызватьМетод(Модуль, ИмяМетода, ПараметрыМетода)
	
	Если Не ЗначениеЗаполнено(ИмяМетода) Тогда
		ВызватьИсключение "ИмяМетода не заполнено в контексте. Воспользуйтесь предварительно методом интерфейса `Метод(ИмяМетода)`";
	КонецЕсли;
	
	СтрокаПараметры = "";
	
	Если ЭтоТипМассива(ТипЗнч(ПараметрыМетода)) Тогда
		Для Сч = 0 По ПараметрыМетода.ВГраница() Цикл
			СтрокаПараметры = ЮТОбщий.ДобавитьСтроку(СтрокаПараметры, СтрШаблон("ПараметрыМетода[%1]", Сч), ", ");
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыМетода) Тогда
		ВызватьИсключение СтрШаблон("Не верный тип параметров `%1`, должен быть массив", ТипЗнч(ПараметрыМетода));
	КонецЕсли;
	
	Если Модуль <> Неопределено Тогда
		СтрокаДляВыполнения = СтрШаблон("Модуль.%1(%2)", ИмяМетода, СтрокаПараметры);
	Иначе
		СтрокаДляВыполнения = СтрШаблон("%1(%2)", ИмяМетода, СтрокаПараметры);
	КонецЕсли;
	
	Результат = Новый Структура("ИсключениеВозникло, ТекстИсключения", Ложь);
	Попытка
		Выполнить(СтрокаДляВыполнения);
	Исключение
		Результат.ИсключениеВозникло = Истина;
		Результат.ТекстИсключения = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьТипЗначения(Значение, Знач ОжидаемыйТип, Описание = "ожидаемого значения", ЕслиУстановлен = Ложь)
	
	Если ЕслиУстановлен И Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипОжидаемогоТипа = ТипЗнч(ОжидаемыйТип);
	
	Если ТипОжидаемогоТипа = Тип("Строка") Тогда
		ОжидаемыйТип = Тип(ОжидаемыйТип);
		ТипОжидаемогоТипа = Тип("Тип");
	КонецЕсли;
	
	Соответствует = Ложь;
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипОжидаемогоТипа = Тип("ОписаниеТипов") Тогда
		Соответствует = ОжидаемыйТип.СодержитТип(ТипЗначения);
	Иначе
		Соответствует = ТипЗначения = ОжидаемыйТип;
	КонецЕсли;
	
	Если НЕ Соответствует Тогда
		ТекстОшибки = СтрШаблон("Не верный тип %1 (`%2`), должен быть `%3`", Описание, ТипЗначения, ОжидаемыйТип);
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

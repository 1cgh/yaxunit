//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2024 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область ПрограммныйИнтерфейс

// Конкатенирует строки, разделяя их разделителем
//
// Параметры:
//  ИсходнаяСтрока		 - Строка	 - Исходная строка
//  ДополнительнаяСтрока - Строка	 - Добавляемая строка
//  Разделитель			 - Строка	 - Строка разделитель, любой набор символов - разделитель между подстроками
// 
// Возвращаемое значение:
//  Строка - Результат конкатенации строк
//
Функция ДобавитьСтроку(ИсходнаяСтрока, ДополнительнаяСтрока, Разделитель = ";") Экспорт
	
	Если Не ПустаяСтрока(ДополнительнаяСтрока) Тогда
		
		Если Не ПустаяСтрока(ИсходнаяСтрока) Тогда
			Возврат Строка(ИсходнаяСтрока) + Разделитель + Строка(ДополнительнаяСтрока);
		Иначе
			Возврат Строка(ДополнительнаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Строка(ИсходнаяСтрока);
	
КонецФункции

// Возвращает массив на основании строки.
// При этом: 
// * отсекает незначащие символы, стоящие слева от первого значащего символа в строке, и пробелы, стоящие справа от последнего значащего символа в строке.
// * в отличии от `СтрРазделить` в качестве разделителля используется вся переданная строка, а не любой из символов входящий в нее.
//
// Параметры:
//  Значение - Строка - преобразуемая строка
//  Разделитель - Строка - строка-разделитель
// 
// Возвращаемое значение:
//  Массив Из Строка - массив строк
//
Функция РазделитьСтроку(Знач Значение, Разделитель = ";") Экспорт
	
	КодУниверсальногоРазделителя = 5855;
	УниверсальныйРазделитель = Символ(КодУниверсальногоРазделителя);
	МодифицированнаяСтрока = СтрЗаменить(Значение, Разделитель, УниверсальныйРазделитель);
	
	МассивСтрок = ?(МодифицированнаяСтрока = "", Новый Массив, СтрРазделить(МодифицированнаяСтрока, УниверсальныйРазделитель));
	
	Для Индекс = 0 По МассивСтрок.ВГраница() Цикл
		МассивСтрок[Индекс] = СокрЛП(МассивСтрок[Индекс]);
	КонецЦикла;
		
	Возврат МассивСтрок;
	
КонецФункции

// Формирует строку из заданного количества повторяемых символов
// Параметры:
//  Символ - Строка - Повторяемый символ
//  Количество - Число - Количество повторений
// 
// Возвращаемое значение:
//  Строка - Строка повторяемых символов
Функция СтрокаСимволов(Символ, Количество) Экспорт
	
	Возврат СтрСоединить(Новый Массив(Количество + 1), Символ);
	
КонецФункции

// Строка с символами русского алфавита
// 
// Параметры:
//  НижнийРегистр - Булево - добавить символы в нижнем регистре
//  ВерхнийРегистр - Булево - добавить символы в верхнем регистре
// 
// Возвращаемое значение:
//  Строка
Функция РусскиеБуквы(НижнийРегистр = Истина, ВерхнийРегистр = Ложь) Экспорт
	
	Возврат Буквы("абвгдеёжзийклмнопрстуфхцчшщъыьэюя", НижнийРегистр, ВерхнийРегистр);
	
КонецФункции

// Строка с символами английского алфавита
// 
// Параметры:
//  НижнийРегистр - Булево - добавить символы в нижнем регистре
//  ВерхнийРегистр - Булево - добавить символы в верхнем регистре
// 
// Возвращаемое значение:
//  Строка
Функция АнглийскиеБуквы(НижнийРегистр = Истина, ВерхнийРегистр = Ложь) Экспорт
	
	Возврат Буквы("abcdefghijklmnopqrstuvwxyz", НижнийРегистр, ВерхнийРегистр);
	
КонецФункции

// Строка с числами
// 
// Возвращаемое значение:
//  Строка
Функция Цифры() Экспорт
	
	Возврат "1234567890";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Буквы(Буквы, НижнийРегистр, ВерхнийРегистр)
	
	Если НижнийРегистр И ВерхнийРегистр Тогда
		Возврат Буквы + ВРег(Буквы);
	ИначеЕсли НижнийРегистр Тогда
		Возврат Буквы;
	ИначеЕсли ВерхнийРегистр Тогда
		Возврат ВРег(Буквы);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

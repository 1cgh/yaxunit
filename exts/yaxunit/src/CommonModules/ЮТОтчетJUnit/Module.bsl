//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2022 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции, предназначенные для использования другими 
// объектами конфигурации или другими программами
///////////////////////////////////////////////////////////////////////////////// 
#Область ПрограммныйИнтерфейс

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции для служебного использования внутри подсистемы
///////////////////////////////////////////////////////////////////////////////// 

#Область СлужебныйПрограммныйИнтерфейс

Функция РеализуетФормат(ФорматОтчета) Экспорт
	
	Возврат СтрСравнить(ФорматОтчета, "jUnit") = 0;
	
КонецФункции

Функция ИмяФайлаПоУмолчанию() Экспорт
	
	Возврат "junit.xml";
	
КонецФункции

Функция ДанныеОтчета(Знач РезультатВыполнения) Экспорт
	
	Возврат СформироватьОтчетОТестировании(РезультатВыполнения);
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, составляющие внутреннюю реализацию модуля 
///////////////////////////////////////////////////////////////////////////////// 

#Область СлужебныеПроцедурыИФункции

// СформироватьОтчетОТестировании
//  Формирует отчет (xml-файл) и возвращает его в виде двоичных данных
//  
// Параметры:
// 	РезультатТестирования - Массив - результаты всех сценариев теста
// Возвращаемое значение:
// 	ДвоичныеДанные - полученный отчет
Функция СформироватьОтчетОТестировании(РезультатТестирования) Экспорт
	
	Поток = Новый ПотокВПамяти();
	ЗаписьXML = Новый ЗаписьXML;
	
	ЗаписьXML.ОткрытьПоток(Поток, "UTF-8", Ложь);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("testsuites");
	
	Номер = 0;
	
	Для Каждого Набор Из РезультатТестирования Цикл
		ЗаписатьНабор(ЗаписьXML, Набор, Номер);
		Номер = Номер + 1;
	КонецЦикла;
	
	ЗаписатьСвойства(ЗаписьXML, Новый Структура("executor, reportDate", "BIA YAXUnit", ТекущаяДатаСеанса()));
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

// ЗаписатьРезультатТеста
// 
// Параметры:
//  ЗаписьXML - ЗаписьXML - Запись XML
//  РезультатТеста - Структура - Результат теста
Процедура ЗаписатьТест(ЗаписьXML, РезультатТеста)
	
	Статусы = ЮТФабрика.СтатусыИсполненияТеста();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("testcase");
	ЗаписьXML.ЗаписатьАтрибут("name", РезультатТеста.Имя);
	ЗаписьXML.ЗаписатьАтрибут("classname", РезультатТеста.ПолноеИмяМетода);
	ЗаписьXML.ЗаписатьАтрибут("time", XMLСтрока(ПродолжительностьВСекундах(РезультатТеста.Длительность)));
	
	Сообщение = СообщениеОбОшибке(РезультатТеста);
	
	Если РезультатТеста.Статус = Статусы.Ошибка Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("failure");
		ЗаписьXML.ЗаписатьАтрибут("message", Сообщение);
		
		Если ЗначениеЗаполнено(РезультатТеста.ОписаниеОшибки.ТипОшибки) Тогда
			ЗаписьXML.ЗаписатьАтрибут("type", XMLСтрока(РезультатТеста.ОписаниеОшибки.ТипОшибки));
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("expected");
		ЗаписьXML.ЗаписатьТекст(ЗначениеВСтрокуjUnit(РезультатТеста.ОписаниеОшибки.ОжидаемоеЗначение));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("actual");
		ЗаписьXML.ЗаписатьТекст(ЗначениеВСтрокуjUnit(РезультатТеста.ОписаниеОшибки.ПроверяемоеЗначение));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьТекст(РезультатТеста.ОписаниеОшибки.Стек);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	ИначеЕсли РезультатТеста.Статус = Статусы.Пропущен Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("skipped");
		ЗаписьXML.ЗаписатьАтрибут("message", Сообщение);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	ИначеЕсли РезультатТеста.Статус = Статусы.Ожидание Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("skipped");
		ЗаписьXML.ЗаписатьАтрибут("message", "Тест не был вызван");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	ИначеЕсли РезультатТеста.Статус <> Статусы.Успешно Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("error");
		ЗаписьXML.ЗаписатьАтрибут("message", Сообщение);
		
		Если ЗначениеЗаполнено(РезультатТеста.ОписаниеОшибки.ТипОшибки) Тогда
			ЗаписьXML.ЗаписатьАтрибут("type", XMLСтрока(РезультатТеста.ОписаниеОшибки.ТипОшибки));
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьТекст(РезультатТеста.ОписаниеОшибки.Стек);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьНабор(ЗаписьXML, Набор, Номер)
	
	КоличествоТестов = 0;
	КоличествоПропущенных = 0;
	КоличествоУпавших = 0;
	КоличествоСломанных = 0;
	
	Статусы = ЮТФабрика.СтатусыИсполненияТеста();
	
	Для Каждого РезультатТеста Из Набор.Тесты Цикл
		
		КоличествоТестов = КоличествоТестов + 1;
		
		Если РезультатТеста.Статус = Статусы.Ошибка Тогда
			КоличествоУпавших = КоличествоУпавших + 1;
		ИначеЕсли РезультатТеста.Статус = Статусы.Пропущен ИЛИ РезультатТеста.Статус = Статусы.Ожидание Тогда
			КоличествоПропущенных = КоличествоПропущенных + 1;
		ИначеЕсли РезультатТеста.Статус <> Статусы.Успешно Тогда
			КоличествоСломанных = КоличествоСломанных + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("testsuite");
	ЗаписьXML.ЗаписатьАтрибут("id", XMLСтрока(Номер));
	ЗаписьXML.ЗаписатьАтрибут("name", СтрШаблон("%1. %2", Набор.Представление, Набор.Режим));
	ЗаписьXML.ЗаписатьАтрибут("tests", XMLСтрока(КоличествоТестов));
	ЗаписьXML.ЗаписатьАтрибут("errors", XMLСтрока(КоличествоСломанных));
	ЗаписьXML.ЗаписатьАтрибут("skipped", XMLСтрока(КоличествоПропущенных));
	ЗаписьXML.ЗаписатьАтрибут("failures", XMLСтрока(КоличествоУпавших));
	ЗаписьXML.ЗаписатьАтрибут("timestamp", XMLСтрока(МестноеВремяПоВременнойМетке(Набор.ДатаСтарта)));
	ЗаписьXML.ЗаписатьАтрибут("time", XMLСтрока(ПродолжительностьВСекундах(Набор.Длительность)));
	ЗаписьXML.ЗаписатьАтрибут("package", Набор.МетаданныеМодуля.Имя);
	
	Если ЗначениеЗаполнено(Набор.ОписаниеОшибки) Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("error");
		ЗаписьXML.ЗаписатьТекст(СообщениеОбОшибке(Набор));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
		
	Для Каждого РезультатТеста Из Набор.Тесты Цикл
		
		ЗаписатьТест(ЗаписьXML, РезультатТеста);
		
	КонецЦикла;
	
	ЗаписатьСвойства(ЗаписьXML, Новый Структура("context", Набор.Режим));
	ЗаписьXML.ЗаписатьКонецЭлемента(); // testsuite
	
КонецПроцедуры

Функция ЗначениеВСтрокуjUnit(Знач Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("Строка") Тогда
	
		Возврат XMLСтрока(Значение);
	
	ИначеЕсли ТипЗначения = Тип("Массив") Тогда
	
		Возврат ЗначениеВСтрокуМассивjUnit(Значение);
	
	ИначеЕсли ТипЗначения = Тип("Структура") Или ТипЗначения = Тип("Соответствие") Или ТипЗначения = Тип("СписокЗначений") Тогда
		
		Возврат ЗначениеВСтрокуПростаяКоллекцияjUnit(Значение);
		
	ИначеЕсли ТипЗначения = Тип("Тип") Или ТипЗначения = Тип("СтандартныйПериод") Тогда
		
		Возврат Строка(Значение);
		
	Иначе
		
		Попытка
			
			Возврат XMLСтрока(Значение);
			
		Исключение
			
			Возврат Строка(Значение);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

Функция ЗначениеВСтрокуМассивjUnit(Коллекция)
	
	Стр = "";
	
	Для Ккк = 0 По Коллекция.Количество() - 1 Цикл
		
		Стр = Стр + ЗначениеВСтрокуjUnit(Коллекция[Ккк]);
		
		Если Ккк < Коллекция.Количество() - 1 Тогда
			
			Стр = Стр + Символы.ПС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Стр;
	
КонецФункции

Функция ЗначениеВСтрокуПростаяКоллекцияjUnit(Коллекция)
	
	Стр = "|";
	
	Для Каждого Элем Из Коллекция Цикл
		
		Стр = " " + Стр + Элем.Значение + " |";
		
	КонецЦикла;
	
	Возврат Стр;
	
КонецФункции

Функция СообщениеОбОшибке(Объект)
	
	Если ТипЗнч(Объект.ОписаниеОшибки) = Тип("Структура") Тогда
		Сообщение = Объект.ОписаниеОшибки.Сообщение;
	ИначеЕсли ЗначениеЗаполнено(Объект.ОписаниеОшибки) Тогда
		Сообщение = Строка(Объект.ОписаниеОшибки);
	Иначе
		Сообщение = Неопределено;
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

Функция МестноеВремяПоВременнойМетке(Метка)
	
	Возврат МестноеВремя('00010101' + Метка / 1000);
	
КонецФункции

Функция ПродолжительностьВСекундах(Продолжительность)
	
	Возврат Продолжительность / 1000;
	
КонецФункции

Процедура ЗаписатьСвойства(ЗаписьXML, Свойства)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("properties");
	
	Для Каждого Свойство Из Свойства Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("property");
		ЗаписьXML.ЗаписатьАтрибут("name", Свойство.Ключ);
		ЗаписьXML.ЗаписатьАтрибут("value", ЗначениеВСтрокуjUnit(Свойство.Значение));
		ЗаписьXML.ЗаписатьКонецЭлемента(); // property
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // properties
	
КонецПроцедуры

#КонецОбласти

//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2022 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции, предназначенные для использования другими 
// объектами конфигурации или другими программами
///////////////////////////////////////////////////////////////////////////////// 
#Область ПрограммныйИнтерфейс

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции для служебного использования внутри подсистемы
///////////////////////////////////////////////////////////////////////////////// 

#Область СлужебныйПрограммныйИнтерфейс

// ВыполнитьМодульноеТестирование
//  Метод, по параметрам запуска, запускает выполнение всего процесса тестирования.
// 
// Параметры:
// 	ПараметрыЗапускаТестов - Структура - Параметры запуска тестирования, см. ЮТФабрика.ПараметрыЗапуска() и см. ЮТПараметры.ПрочитатьПараметрыЗапуска
Процедура ВыполнитьМодульноеТестирование(ПараметрыЗапускаТестов) Экспорт
	
	ТестовыеМодули = ЮТЧитатель.ПрочитатьНаборыТестов(ПараметрыЗапускаТестов);
	
	РезультатыТестирования = Новый Массив();
	
	Для Каждого ТестовыйМодуль Из ТестовыеМодули Цикл
		
		РезультатыПрогона = ПрогонТестовМодуля(ТестовыйМодуль);
		
		ЮТОбщий.ДополнитьМассив(РезультатыТестирования, РезультатыПрогона);
		
	КонецЦикла;
	
#Если Клиент Тогда
	ЮТОтчет.СформироватьОтчет(РезультатыТестирования, ПараметрыЗапускаТестов);
#КонецЕсли

КонецПроцедуры

// ПрогонНаборов
//  Выполняет тесты наборов модуля. Возвращает результат прогона
// Параметры:
//  Наборы - Массив - Наборы исполняемых тестов, структуру набора см. ЮТФабрика.ОписаниеИсполняемогоНабораТестов 
//  ИмяМодуля - Строка - Имя модуля, которому принадлежат тесты
// 
// Возвращаемое значение:
//  Массив - Результат прогона наборов тестов, структура набора см. ЮТФабрика.ОписаниеИсполняемогоНабораТестов
Функция ПрогонНаборов(Наборы, ИмяМодуля) Экспорт
	
	Ошибка = ПередВсемиТестамиМодуля(ИмяМодуля);
	
	Если Ошибка <> Неопределено Тогда
		ЗаписатьОшибкуВ(Наборы, ОшибкаВызоваОбработчика("ПередВсемиТестамиМодуля", Ошибка));
		Возврат Наборы;
	КонецЕсли;
	
	Для Каждого Набор Из Наборы Цикл
		
		Результат = ПрогонНабора(Набор, ИмяМодуля);
		
		Если Результат <> Неопределено Тогда
			Набор.Тесты = Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	Ошибка = ПослеВсехТестовМодуля(ИмяМодуля);
	
	Если Ошибка <> Неопределено Тогда
		ЗаписатьОшибкуВ(Наборы, ОшибкаВызоваОбработчика("ПослеВсехТестовМодуля", Ошибка));
		Возврат Наборы;
	КонецЕсли;
	
	Возврат Наборы;
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, составляющие внутреннюю реализацию модуля 
///////////////////////////////////////////////////////////////////////////////// 

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийЗапуска

Функция ПередВсемиТестамиМодуля(ИмяМодуля)
	
	Возврат ВызватьОбработчикМодуля(ИмяМодуля, "ПередВсемиТестами");
	
КонецФункции

Функция ПередТестовымНабором(Набор, ИмяМодуля)
	
	ЮТКонтекст.УстановитьКонтекстНабораТестов(Новый Структура());
	
	Возврат ВызватьОбработчикМодуля(ИмяМодуля, "ПередТестовымНабором");
	
КонецФункции

Функция ПередТестом(Тест, ИмяМодуля)
	
#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
	ПолучитьСообщенияПользователю(Истина);
#КонецЕсли
	
	ЮТУтверждения.СброситьКонтекст();
	ЮТКонтекст.УстановитьКонтекстТеста(Новый Структура());
	
	Возврат ВызватьОбработчикМодуля(ИмяМодуля, "ПередТестом");
	
КонецФункции

Функция ПослеТеста(Тест, ИмяМодуля)
	
	Возврат ВызватьОбработчикМодуля(ИмяМодуля, "ПослеТеста");
	
КонецФункции

Функция ПослеТестовогоНабора(Набор, ИмяМодуля)
	
	Возврат ВызватьОбработчикМодуля(ИмяМодуля, "ПослеТестовогоНабора");
	
КонецФункции

Функция ПослеВсехТестовМодуля(ИмяМодуля)
	
	Возврат ВызватьОбработчикМодуля(ИмяМодуля, "ПослеВсехТестов");
	
КонецФункции

Процедура ОбработатьЗавершениеТеста(Тест, Ошибка = Неопределено)
	
	Тест.Длительность = ТекущаяУниверсальнаяДатаВМиллисекундах() - Тест.ДатаСтарта;
	
	СтатусыИсполненияТеста = ЮТФабрика.СтатусыИсполненияТеста();
	
	Если Ошибка = Неопределено Тогда
		
		Тест.Статус = СтатусыИсполненияТеста.Успешно;
		
	Иначе
		
		ЮТРегистрацияОшибок.ОбработатьОшибкуТеста(Тест, Ошибка);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВызватьОбработчикМодуля(ИмяМодуля, ИмяМетода)
	
	Попытка
		
		Если ЮТОбщий.МетодМодуляСуществует(ИмяМодуля, ИмяМетода) Тогда
			
			Команда = СтрШаблон("%1.%2()", ИмяМодуля, ИмяМетода);
			Выполнить(Команда);
			
		КонецЕсли;
		
	Исключение
		
		Возврат ИнформацияОбОшибке();
		
	КонецПопытки;
	
КонецФункции

Функция ОшибкаВызоваОбработчика(ИмяОбработчика, Ошибка)
	
	Возврат ЮТРегистрацияОшибок.ДанныеОшибки(Ошибка, СтрШаблон("Ошибка обработчика '%1': %2", ИмяОбработчика, Ошибка.Описание));
	
КонецФункции

#КонецОбласти

#Область Исполнение

Функция ПрогонТестовМодуля(ТестовыйМодуль)
	
	ИсполняемыеНаборыМодуля = ИсполняемыеНаборыТестовМодуля(ТестовыйМодуль.МетаданныеМодуля, ТестовыйМодуль.НаборыТестов);
	
	КонтекстыПриложения = ЮТФабрика.КонтекстыПриложения();
	СтатусыИсполнения = ЮТФабрика.СтатусыИсполненияТеста();
	КонтекстыИсполнения = ЮТФабрика.КонтекстыИсполнения();
	
	Клиентские = Новый Массив();
	Серверные = Новый Массив();
	Пропущенные = Новый Массив();
	
	Для Каждого ИсполняемыйНаборТестов Из ИсполняемыеНаборыМодуля Цикл
		
		Если НЕ ИсполняемыйНаборТестов.Выполнять Тогда
			
			Пропущенные.Добавить(ИсполняемыйНаборТестов);
			Продолжить;
			
		ИначеЕсли КонтекстыПриложения.Найти(ИсполняемыйНаборТестов.Режим) = Неопределено Тогда
			
			Пропущенные.Добавить(ИсполняемыйНаборТестов);
			Для Каждого Тест Из ИсполняемыйНаборТестов.Тесты Цикл
				
				Тест.Статус = СтатусыИсполнения.Пропущен;
				Тест.ОписаниеОшибки = "Неподдерживаемый режим запуска";
				
			КонецЦикла;
			Продолжить;
			
		КонецЕсли;
		
		Контекст = ЮТФабрика.КонтекстИсполнения(ИсполняемыйНаборТестов.Режим);
		
		Если Контекст = КонтекстыИсполнения.Сервер Тогда
			
			Серверные.Добавить(ИсполняемыйНаборТестов);
			
		ИначеЕсли Контекст = КонтекстыИсполнения.Клиент Тогда
			
			Клиентские.Добавить(ИсполняемыйНаборТестов);
			
		Иначе
			
			Пропущенные.Добавить(ИсполняемыйНаборТестов);
			ИсполняемыйНаборТестов.ОписаниеОшибки = "Неизвестный контекст/режим исполнения";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результаты = Новый Массив();
	
	Если Клиентские.Количество() Тогда
		Результат = ПрогонНаборов(Клиентские, ТестовыйМодуль.МетаданныеМодуля.Имя);
		ЮТОбщий.ДополнитьМассив(Результаты, Результат);
	КонецЕсли;
	
	Если Серверные.Количество() Тогда
		Результат = ЮТИсполнительСервер.ПрогонНаборов(Серверные, ТестовыйМодуль.МетаданныеМодуля.Имя);
		ЮТОбщий.ДополнитьМассив(Результаты, Результат);
	КонецЕсли;
	
	ЮТОбщий.ДополнитьМассив(Результаты, Пропущенные);
	
	Возврат Результаты;
	
КонецФункции

Функция ПрогонНабора(Набор, ИмяМодуля)
	
	Ошибка = ПередТестовымНабором(Набор, ИмяМодуля);
	
	Если Ошибка <> Неопределено Тогда
		Набор.ОписаниеОшибки = ОшибкаВызоваОбработчика("ПередТестовымНабором", Ошибка);
		Возврат Неопределено;
	КонецЕсли;
	
	Набор.ДатаСтарта = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Результаты = Новый Массив();
	
	Для Каждого Тест Из Набор.Тесты Цикл
		
		ЗапуститьТест(Тест, ИмяМодуля);
		
		Результаты.Добавить(Тест);
		
	КонецЦикла;
	
	Ошибка = ПослеТестовогоНабора(Набор, ИмяМодуля);
		
	Если Ошибка <> Неопределено Тогда
		Набор.ОписаниеОшибки = ОшибкаВызоваОбработчика("ПослеТестовогоНабора", Ошибка);
	КонецЕсли;
		
	Набор.Длительность = ТекущаяУниверсальнаяДатаВМиллисекундах() - Набор.ДатаСтарта;
		
	Возврат Результаты;
	
КонецФункции

Процедура ЗапуститьТест(Тест, ИмяМодуля)
	
	СтатусыИсполненияТеста = ЮТФабрика.СтатусыИсполненияТеста();
	
	Тест.ДатаСтарта = ТекущаяУниверсальнаяДатаВМиллисекундах();
	СтрокаЗапуска = СтрШаблон("%1()", Тест.ПолноеИмяМетода);
	
	Попытка
		
		Ошибка = ПередТестом(Тест, ИмяМодуля);
		
		Если Ошибка <> Неопределено Тогда
			ОбработатьЗавершениеТеста(Тест, ОшибкаВызоваОбработчика("ПередТестом", Ошибка));
			Возврат;
		КонецЕсли;
		
		Тест.Статус = СтатусыИсполненияТеста.Исполнение;
		
		Выполнить(СтрокаЗапуска);
		
		ПослеТеста(Тест, ИмяМодуля);
		
		Если Ошибка <> Неопределено Тогда
			ОбработатьЗавершениеТеста(Тест, ОшибкаВызоваОбработчика("ПослеТеста", Ошибка));
		Иначе
			ОбработатьЗавершениеТеста(Тест);
		КонецЕсли;
		
	Исключение
		
		ОбработатьЗавершениеТеста(Тест, ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВ(Объекты, Ошибка)
	
	Для Каждого Объект Из Объекты Цикл
		
		Объект.ОписаниеОшибки = Ошибка;
		
		Если Объект.Свойство("Статус") Тогда
			
			Объект.Статус = ЮТФабрика.СтатусыИсполненияТеста().Сломан;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ИсполняемыеНаборыТестовМодуля(МетаданныеМодуля, ТестовыеНаборы)
	
	ИсполняемыеТестовыеНаборы = Новый Массив;
	
	Для Каждого ТестовыйНабор Из ТестовыеНаборы Цикл
		
		НаборыКонтекстов = Новый Структура;
		
		ТестыНабора = ЮТОбщий.ЗначениеСтруктуры(ТестовыйНабор, "Тесты", Новый Массив());
		
		Для Каждого Тест Из ТестыНабора Цикл
			
			Для Каждого Контекст Из Тест.КонтекстВызова Цикл
				
				Если НЕ НаборыКонтекстов.Свойство(Контекст) Тогда
					ИсполняемыйНабор = ЮТФабрика.ОписаниеИсполняемогоНабораТестов(ТестовыйНабор, МетаданныеМодуля);
					ИсполняемыйНабор.Режим = Контекст;
					НаборыКонтекстов.Вставить(Контекст, ИсполняемыйНабор);
				Иначе
					ИсполняемыйНабор = НаборыКонтекстов[Контекст];
				КонецЕсли;
				
				ИсполняемыйТест = ЮТФабрика.ОписаниеИсполняемогоТеста(Тест, МетаданныеМодуля, Контекст);
				ИсполняемыйНабор.Тесты.Добавить(ИсполняемыйТест);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если НаборыКонтекстов.Количество() Тогда
			
			Для Каждого Элемент Из НаборыКонтекстов Цикл
				ИсполняемыеТестовыеНаборы.Добавить(Элемент.Значение);
			КонецЦикла;
			
		Иначе
			
			// TODO. Корякин А. 2021.11.24 А надо ли добавлять при отсутствии тестов
			ИсполняемыеТестовыеНаборы.Добавить(ЮТФабрика.ОписаниеИсполняемогоНабораТестов(ТестовыйНабор, МетаданныеМодуля));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИсполняемыеТестовыеНаборы;
	
КонецФункции

#КонецОбласти

//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2022 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции, предназначенные для использования другими 
// объектами конфигурации или другими программами
///////////////////////////////////////////////////////////////////////////////// 
#Область ПрограммныйИнтерфейс

// КонтекстыВызова
//  Возвращает перечисление возможных контекстов вызова
// Возвращаемое значение:
//  ФиксированнаяСтруктура - Контексты вызова
Функция КонтекстыВызова() Экспорт
	
	Контексты = Новый Структура();
	
	Контексты.Вставить("КлиентОбычноеПриложение", "КлиентОбычноеПриложение");
	Контексты.Вставить("КлиентУправляемоеПриложение", "КлиентУправляемоеПриложение");
	Контексты.Вставить("Сервер", "Сервер");
	Контексты.Вставить("ВызовСервера", "ВызовСервера");
	
	// TODO Подозреваю нужно добавить web клиент
	
	Возврат Новый ФиксированнаяСтруктура(Контексты);
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции для служебного использования внутри подсистемы
///////////////////////////////////////////////////////////////////////////////// 
#Область СлужебныйПрограммныйИнтерфейс

#Область Перечисления

// КонтекстыИсполнения
//  Возвращает перечисление возможных контекстов исполнения тестов
// Возвращаемое значение:
//  ФиксированнаяСтруктура - Контексты исполнения
Функция КонтекстыИсполнения() Экспорт
	
	Контексты = Новый Структура();
	
	Контексты.Вставить("Клиент", "Клиент");
	Контексты.Вставить("Сервер", "Сервер");
	
	Возврат Новый ФиксированнаяСтруктура(Контексты);
	
КонецФункции

// СтатусыИсполненияТеста
//  Возвращает перечисление возможных статусов выполнения теста, жизненный цикл теста
// Возвращаемое значение:
//  ФиксированнаяСтруктура - Статусы исполнения теста
Функция СтатусыИсполненияТеста() Экспорт
	
	Статусы = Новый Структура();
	
	Статусы.Вставить("Ожидание", "Ожидание");
	Статусы.Вставить("Исполнение", "Исполнение");
	Статусы.Вставить("Успешно", "Успешно");
	Статусы.Вставить("Ошибка", "Ошибка");
	Статусы.Вставить("Сломан", "Сломан");
	Статусы.Вставить("Пропущен", "Пропущен");
	Статусы.Вставить("НеРеализован", "НеРеализован");
	
	Возврат Новый ФиксированнаяСтруктура(Статусы);
	
КонецФункции

Функция ТипыОшибок() Экспорт
	
	Типы = Новый Структура;
	
	Типы.Вставить("ТестНеРеализован", "Не реализован");
	Типы.Вставить("ОшибкаСравнения", "Ошибка сравнения");
	
	Возврат Новый ФиксированнаяСтруктура(Типы);
	
КонецФункции

#КонецОбласти

#Область СтруктурыДанных

// ОписаниеТестовогоНабора
//  Возвращает описание регистрируемого тестового набора.
//  Эта структура используется на этапе формирования описаний имеющихся тестов
// Параметры:
//  Имя - Строка - Имя набора
//  ТегиСтрокой - Строка - Теги набора
// 
// Возвращаемое значение:
//  Структура - Описание тестового набора:
// * Имя - Строка - Имя набора
// * Представление - Строка - Представление, краткое описание
// * Теги - Массив - Коллекция тегов набора
// * Тесты - Массив - Коллекция тестов набора, см. ОписаниеТеста
// * ОписаниеОшибки - Строка, Неопределено - Описание ошибки регистрации набора
Функция ОписаниеТестовогоНабора(Имя, ТегиСтрокой = "") Экспорт
	
	Описание = Новый Структура;
	Описание.Вставить("Имя", Строка(Имя));
	Описание.Вставить("Представление", Строка(Имя));
	Описание.Вставить("Теги", СтрРазделить(ТегиСтрокой, ", ", Ложь));
	Описание.Вставить("Тесты", Новый Массив);
	Описание.Вставить("ОписаниеОшибки", Неопределено);
	
	Возврат Описание;
	
КонецФункции

// ОписаниеТеста
//  Возвращает описание регистрируемого теста.
//  Эта структура используется на этапе формирования описаний имеющихся тестов
// Параметры:
//  Имя - Строка - Имя тестового метода
//  Представление - Строка - Представление, краткое описание теста
//  КонтекстыВызова - Строка - Контексты исполнения теста, см. КонтекстВызова
//  ТегиСтрокой - Строка - Теги теста
// 
// Возвращаемое значение:
//  Структура - Описание теста:
// * Имя - Строка - Имя теста (тестового метода)
// * Представление - Строка - Представление теста
// * Теги - Массив - Теги теста
// * КонтекстВызова - Массив - Контексты исполнения теста
Функция ОписаниеТеста(Имя, Знач Представление, КонтекстыВызова, Знач ТегиСтрокой = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(Представление) Тогда
		Представление = Имя;
	КонецЕсли;
	
	Если ТегиСтрокой = Неопределено Тогда
		ТегиСтрокой = "";
	КонецЕсли;
	
	Описание = Новый Структура();
	Описание.Вставить("Имя", Строка(Имя));
	Описание.Вставить("Представление", Строка(Представление));
	Описание.Вставить("Теги", СтрРазделить(ТегиСтрокой, ", ", Ложь));
	Описание.Вставить("КонтекстВызова", СтрРазделить(КонтекстыВызова, ", ", Ложь));
	
	Возврат Описание;
	
КонецФункции

// ОписаниеИсполняемогоНабораТестов
//  Возвращает описание исполняемого тестового набора.
//  Содержит данные необходимые для выполнения прогона тестов
// Параметры:
//  НаборТестов - Массив - Коллекция зарегистрированных тестовых наборов, см. ОписаниеТестовогоНабора
//  МетаданныеМодуля - Структура - Описание тестового модуля, см. ЮТФабрика.ОписаниеМодуля
// 
// Возвращаемое значение:
//  Структура - Описание исполняемого набора тестов:
// * Имя - Строка - Имя набора
// * Представление - Строка - Представление набора
// * Теги - Массив - Тэги набора
// * ОписаниеОшибки - Строка - Описание ошибки загрузки или прогона набора
// * Режим - Строка - Режим исполнения набора, см. КонтекстыВызова
// * МетаданныеМодуля - Структура - Описание тестового модуля, см. ЮТФабрика.ОписаниеМодуля
// * Тесты - Массив - Тесты набора, структуру тестов см. ОписаниеИсполняемогоТеста
// * Выполнять - Булево - Признак, что можно выполнить прогон набора (нет ошибок блокирующих запуск) 
// * ДатаСтарта - Число - Дата запуска набора
// * Длительность - Число - Продолжительность выполнения набора
Функция ОписаниеИсполняемогоНабораТестов(НаборТестов, МетаданныеМодуля) Экспорт
	
	Описание = Новый Структура();
	
	Описание.Вставить("Имя", НаборТестов.Имя);
	Описание.Вставить("Представление", НаборТестов.Представление);
	Описание.Вставить("Теги", НаборТестов.Теги);
	Описание.Вставить("ОписаниеОшибки", НаборТестов.ОписаниеОшибки);
	
	Описание.Вставить("Режим");
	Описание.Вставить("МетаданныеМодуля", МетаданныеМодуля);
	Описание.Вставить("Тесты", Новый Массив);
	Описание.Вставить("Выполнять", НЕ ЗначениеЗаполнено(Описание.ОписаниеОшибки));
	Описание.Вставить("ДатаСтарта", 0);
	Описание.Вставить("Длительность", 0);
	
	Возврат Описание;
	
КонецФункции

// ОписаниеИсполняемогоТеста
//  Возвращает описание исполняемого теста
//  Содержит данные необходимые для выполнения прогона тестов
// 
// Параметры:
//  Тест - Структура - Описание зарегистрированного теста, см. ОписаниеТеста
//  МетаданныеМодуля - Структура - Описание тестового модуля, см. ЮТФабрика.ОписаниеМодуля
//  Режим - Строка - Режим исполнения, см. КонтекстыВызова
// 
// Возвращаемое значение:
//  Структура - Описание исполняемого теста:
// * Имя - Строка - Имя/представление теста
// * Метод - Строка - Имя тестового метода
// * ПолноеИмяМетода - Строка - Полное имя тестового метода, ИмяМодуля.ИмяМетода
// * Теги - Массив - Теги теста
// * Режим - Строка - Режим исполнения теста, см. КонтекстыВызова
// * ДатаСтарта - Число - Дата запуска теста
// * Длительность - Число - Продолжительность выполнения теста
// * Статус - Строка - Статус выполнения теста, см. СтатусыИсполненияТеста
// * ОписаниеОшибки - Структура, Неопределено - Описание ошибки выполнения теста, см. ЮТФабрика.ОписаниеВозникшейОшибки
Функция ОписаниеИсполняемогоТеста(Тест, МетаданныеМодуля, Режим) Экспорт
	
	ПолноеИмяМетода = СтрШаблон("%1.%2", МетаданныеМодуля.Имя, Тест.Имя);
	
	ОписаниеТеста = Новый Структура;
	ОписаниеТеста.Вставить("Имя", Тест.Представление);
	ОписаниеТеста.Вставить("Метод", Тест.Имя);
	ОписаниеТеста.Вставить("ПолноеИмяМетода", ПолноеИмяМетода);
	ОписаниеТеста.Вставить("Теги", Тест.Теги);
	ОписаниеТеста.Вставить("Режим", Режим);
	ОписаниеТеста.Вставить("ДатаСтарта", 0);
	ОписаниеТеста.Вставить("Длительность", 0);
	ОписаниеТеста.Вставить("Статус", СтатусыИсполненияТеста().Ожидание);
	ОписаниеТеста.Вставить("ОписаниеОшибки");
	
	Возврат ОписаниеТеста;
	
КонецФункции

// ПараметрыЗапуска
//  Набор параметров подсистемы тестирования. 
//  Параметры на английском, чтобы не держать несколько реализаций чтения и обработки параметров
// 
// Возвращаемое значение:
//  Структура - Параметры:
// * ВыполнятьМодульноеТестирование - Булево - Признак необходимости выполнения тестов
// * reportPath - Строка - Файл или каталог сохранения отчета о тестировании
// * filter - Структура - Параметры отбора запускаемых тестов, см. ПараметрыФильтрации
// * closeAfterTests - Булево - Признак необходимости закрытия приложения по окончании прогона
// * reportFormat - Строка - Формат отчета о тестировании. 
//                  Модули реализующие различные форматы отчетов собраны в подсистеме ЮТФормированиеОтчета
Функция ПараметрыЗапуска() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ВыполнятьМодульноеТестирование", Ложь);
	
	Параметры.Вставить("reportPath", "");
	Параметры.Вставить("closeAfterTests", Истина);
	Параметры.Вставить("filter", ПараметрыФильтрации());
	Параметры.Вставить("reportFormat", "jUnit");
	
	Возврат Параметры;
	
КонецФункции

// ОписаниеКонтекстаОшибки
//  Возвращает описание детелей/расшифровки ошибки
// Возвращаемое значение:
//  Структура - Детали ошибки:
// * ОшибкаСравнения - Булево - Признак, это ошибка сравнения факта и ожидания
// * ПроверяемоеЗначение - Произвольный - Фактическое значение
// * ОжидаемоеЗначение - Произвольный - Ожидаемое значение
Функция ОписаниеКонтекстаОшибки() Экспорт
	
	Возврат Новый Структура("ОшибкаСравнения, ПроверяемоеЗначение, ОжидаемоеЗначение", Ложь);
	
КонецФункции

// ОписаниеМодуля
//  Возвращает структуру описания модуля
// Возвращаемое значение:
//  Структура - Описание модуля:
// * Имя - Строка - Имя модуля
// * ПолноеИмя - Строка - Полное имя модуля
// * КлиентУправляемоеПриложение - Булево - Доступность контекста 
// * КлиентОбычноеПриложение - Булево - Доступность контекста
// * Сервер - Булево - Доступность контекста
// * ВызовСервера - Булево - Доступность контекста
Функция ОписаниеМодуля() Экспорт
	
	Описание = Новый Структура;
	Описание.Вставить("Имя", "");
	Описание.Вставить("ПолноеИмя", "");
	Описание.Вставить("КлиентУправляемоеПриложение", Ложь);
	Описание.Вставить("КлиентОбычноеПриложение", Ложь);
	Описание.Вставить("Сервер", Ложь);
	Описание.Вставить("ВызовСервера", Ложь);
	
	Возврат Описание;
	
КонецФункции

// ОписаниеВозникшейОшибки
//  Возвращает базовую структуру ошибки
// Возвращаемое значение:
//  Структура - Описание возникшей ошибки:
// * Сообщение - Строка - Описание возникшей ошибки
// * Стек - Строка - Стек возникшей ошибки
// * ТипОшибки - Строка - Тип возникшей ошибки. Доступные значения см. ЮТФабрика.ТипыОшибок
Функция ОписаниеВозникшейОшибки() Экспорт
	
	Возврат Новый Структура("Сообщение, Стек, ТипОшибки", "");
	
КонецФункции

// ОписаниеОшибкиСравнения
//  Возвращает базовую структуру ошибки проверки факта и ожидания
// Возвращаемое значение:
//  Структура - Описание возникшей ошибки:
// * Сообщение - Строка - Описание возникшей ошибки
// * Стек - Строка - Стек возникшей ошибки
// * ТипОшибки - Строка - Тип возникшей ошибки. Доступные значения см. ЮТФабрика.ТипыОшибок
// * ПроверяемоеЗначение - Произвольный - Проверяемое, фактическое значение
// * ОжидаемоеЗначение - Произвольный - Ожидаемое значение
Функция ОписаниеОшибкиСравнения() Экспорт
	
	Описание = ОписаниеВозникшейОшибки();
	Описание.ТипОшибки = ТипыОшибок().ОшибкаСравнения;
	Описание.Вставить("ПроверяемоеЗначение");
	Описание.Вставить("ОжидаемоеЗначение");
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

// КонтекстыМодуля
//  Возвращает коллекцию доступных контекстов выполнения модуля
// Параметры:
//  Модуль Модуль
// 
// Возвращаемое значение:
//  Массив - Контексты модуля
Функция КонтекстыМодуля(Модуль) Экспорт
	
	Контексты = КонтекстыВызова();
	
	КонтекстыМодуля = Новый Массив();
	
	Если Модуль.Сервер Тогда
		КонтекстыМодуля.Добавить(Контексты.Сервер);
	КонецЕсли;
	
	Если Модуль.КлиентУправляемоеПриложение Тогда
		КонтекстыМодуля.Добавить(Контексты.КлиентУправляемоеПриложение);
	КонецЕсли;
	
	Если Модуль.КлиентОбычноеПриложение Тогда
		КонтекстыМодуля.Добавить(Контексты.КлиентОбычноеПриложение);
	КонецЕсли;
	
	Если Модуль.ВызовСервера Тогда
		КонтекстыМодуля.Добавить(Контексты.ВызовСервера);
	КонецЕсли;
	
	Возврат КонтекстыМодуля;

КонецФункции

// КонтекстыПриложения
//  Возвращает коллекцию доступных контекстов приложения
// Возвращаемое значение:
//  Массив - Контексты приложения
Функция КонтекстыПриложения() Экспорт
	
	Контексты = КонтекстыВызова();
	КонтекстыПриложения = Новый Массив();
	
	КонтекстыПриложения.Добавить(Контексты.Сервер);
	КонтекстыПриложения.Добавить(Контексты.ВызовСервера);
	
#Если ТолстыйКлиентОбычноеПриложение Тогда
	КонтекстыПриложения.Добавить(Контексты.КлиентОбычноеПриложение);
#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Или ТонкийКлиент Тогда
	КонтекстыПриложения.Добавить(Контексты.КлиентУправляемоеПриложение);
#КонецЕсли
	
	Возврат КонтекстыПриложения;
	
КонецФункции

// КонтекстИсполнения
//  Возвращает контекст исполнения по контексту вызова
// Параметры:
//  КонтекстВызова - Строка - Контекст вызова, см. ЮТФабрика.КонтекстыВызова
// 
// Возвращаемое значение:
//  Неопределено, Строка - Контекст исполнения
Функция КонтекстИсполнения(КонтекстВызова) Экспорт
	
	КонтекстыВызова = КонтекстыВызова();
	
	Если КонтекстВызова = КонтекстыВызова.Сервер Тогда
		
		Возврат КонтекстыИсполнения().Сервер;
		
	ИначеЕсли КонтекстВызова = КонтекстыВызова.КлиентУправляемоеПриложение
		ИЛИ КонтекстВызова = КонтекстыВызова.КлиентОбычноеПриложение
		ИЛИ КонтекстВызова = КонтекстыВызова.ВызовСервера Тогда
		
		Возврат КонтекстыИсполнения().Клиент;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, составляющие внутреннюю реализацию модуля 
///////////////////////////////////////////////////////////////////////////////// 
#Область СлужебныеПроцедурыИФункции

// ПараметрыФильтрации
// 	Возвращает структуру отборов для поиска тестов
// Возвращаемое значение:
//  Структура - Параметры фильтрации:
// * extensions - Неопределено, Массив - Список тестовых расширений
// * modules - Неопределено, Массив - Список тестовых модулей
// * suites - Неопределено, Массив - Список тестовых наборов
// * paths - Неопределено, Массив - Список путей до тестовых методов, путь может быть не полным.
// 									Например: 
// 									- tests - Ищем тесты в расширении tests
// 									- tests.ОМ_ОбщегоНазначения - Ищем тесты в модуле ОМ_ОбщегоНазначения расширения tests
// 									- tests.ОМ_ОбщегоНазначения.ПолучитьЗначениеРеквизита - указание конкретного теста
// * tags - Неопределено, Массив - Список тэгов
// * contexts - Неопределено, Массив - Список тестируемых контекстов
Функция ПараметрыФильтрации()
	
	Параметры = Новый Структура;
	Параметры.Вставить("extensions", ЮТОбщий.ЗначениеВМассиве("tests"));
	Параметры.Вставить("modules");
	Параметры.Вставить("suites");
	Параметры.Вставить("tags");
	Параметры.Вставить("contexts");
	Параметры.Вставить("paths");
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

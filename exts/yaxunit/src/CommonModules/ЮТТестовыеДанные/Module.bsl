//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2022 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

///////////////////////////////////////////////////////////////////
// ПрограммныйИнтерфейс
// Экспортные процедуры и функции для прикладного использования 
/////////////////////////////////////////////////////////////////// 

#Область ПрограммныйИнтерфейс

// СоздатьЭлемент
//  Создает новый элемент и возвращает его ссылку 
// Параметры:
//  Менеджер - Произвольный - Менеджер справочника/ПВХ и тд.
//  Наименование - Строка, Неопределено - Наименование элемента
//  Реквизиты - Структура, Неопределено - Значения реквизитов элемента
// 
// Возвращаемое значение:
//  ЛюбаяСсылка - Ссылка на созданный объект
Функция СоздатьЭлемент(Менеджер, Наименование = Неопределено, Реквизиты = Неопределено) Экспорт
	
	Объект = Менеджер.СоздатьЭлемент();
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		Объект.Наименование = Наименование;
	Иначе
		Объект.Наименование = Новый УникальныйИдентификатор();
	КонецЕсли;
	
	Если Реквизиты <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Объект, Реквизиты);
	КонецЕсли;
	
	Объект.Записать();
	
	Возврат Объект.Ссылка;
	
КонецФункции

// СлучайноеЧисло
//   Генерирует и возвращает случайное число
// Параметры:
//  Минимум - Неопределено, Число - Минимальное значение
//  Максимум - Неопределено, Число - Максимальное значение
//  ЗнаковПослеЗапятой - Число - Количество знаков после запятой
// 
// Возвращаемое значение:
//  Число - Случайное число
Функция СлучайноеЧисло(Минимум = 0, Максимум = Неопределено, ЗнаковПослеЗапятой = 0) Экспорт
	
	Генератор = ЮТКонтекст.ЗначениеКонтекста("ГенераторСлучайныхЧисел");
	
	Если Генератор = Неопределено Тогда
		Генератор = Новый ГенераторСлучайныхЧисел();
		ЮТКонтекст.УстановитьЗначениеКонтекста("ГенераторСлучайныхЧисел", Генератор);
	КонецЕсли;
	
	Если Максимум = Неопределено Тогда
		Результат = Генератор.СлучайноеЧисло(Минимум);
	Иначе
		Результат = Генератор.СлучайноеЧисло(Минимум, Максимум);
	КонецЕсли;
	
	Если ЗнаковПослеЗапятой > 0 Тогда
		Множитель = Pow(10, ЗнаковПослеЗапятой);
		Результат = Результат + Окр(Генератор.СлучайноеЧисло(0, Множитель) / Множитель, ЗнаковПослеЗапятой);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// СлучайноеПоложительноеЧисло
//   Генерирует и возвращает случайное положительное число
// Параметры:
//  Максимум - Неопределено, Число - Максимальное значение
//  ЗнаковПослеЗапятой - Число - Знаков после запятой
// 
// Возвращаемое значение:
//  Число - Случайное положительное число
Функция СлучайноеПоложительноеЧисло(Максимум = Неопределено, ЗнаковПослеЗапятой = 0) Экспорт
	
	Возврат СлучайноеЧисло(1, Максимум, ЗнаковПослеЗапятой);
	
КонецФункции

// СлучайноеОтрицательноеЧисло
// 
// Параметры:
//  Минимум - Неопределено, Число - Минимальное значение
//  ЗнаковПослеЗапятой - Число - Знаков после запятой
// 
// Возвращаемое значение:
//  Число - Случайное отрицательное число
Функция СлучайноеОтрицательноеЧисло(Минимум = Неопределено, ЗнаковПослеЗапятой = 0) Экспорт
	
	Возврат -СлучайноеЧисло(Минимум, 0, ЗнаковПослеЗапятой);
	
КонецФункции

// СлучайнаяСтрока
//  Генерирует и возвращает случайную строку указанной длины, строка может содержить цифры, английские и русские буквы в разных регистрах
// Параметры:
//  Префикс - Строка - Префикс строки
//  Длина - Число - Длина генерируемой строки, без учета префикса
// 
// Возвращаемое значение:
//  Строка - Случайная строка
Функция СлучайнаяСтрока(Префикс = "", Длина = 10) Экспорт
	
	Строка = "1234567890абвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	
	Результат = "";
	КоличествоСимволов = СтрДлина(Строка);
	
	Для Инд = 1 По Длина Цикл
		
		Результат = Результат + Сред(Строка, СлучайноеЧисло(1, КоличествоСимволов), 1);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// СлучайныйIPАдрес
//   Генерирует и возвращает случайный IP адрес
// Возвращаемое значение:
//  Строка - Случайный IP адрес
Функция СлучайныйIPАдрес() Экспорт
	
	Части = Новый Массив();
	Части.Добавить(СлучайноеЧисло(1, 253));
	Части.Добавить(СлучайноеЧисло(1, 253));
	Части.Добавить(СлучайноеЧисло(1, 253));
	Части.Добавить(СлучайноеЧисло(1, 253));
	
	Возврат СтрСоединить(Части, ".");
	
КонецФункции

// УникальнаяСтрока
//   Генерирует и возвращает уникальную строку
// Параметры:
//  Префикс - Строка - Префик строкис
// 
// Возвращаемое значение:
//  Строка - Уникальная строка
Функция УникальнаяСтрока(Префикс = "") Экспорт
	
	Возврат Префикс + Новый УникальныйИдентификатор();
	
КонецФункции

// СлучайноеЗначениеИзСписка
//  Возвращает случайный элемент списка
// Параметры:
//  Список - Массив из Произвольный - Коллекция возможных значений
// 
// Возвращаемое значение:
//  Произвольный - случайное значение из списка
Функция СлучайноеЗначениеИзСписка(Список) Экспорт
	
	Индекс = СлучайноеЧисло(0, Список.ВГраница());
	
	Возврат Список[Индекс];
	
КонецФункции

#КонецОбласти
/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции для служебного использования внутри подсистемы
///////////////////////////////////////////////////////////////////////////////// 

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, составляющие внутреннюю реализацию модуля 
///////////////////////////////////////////////////////////////////////////////// 

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
